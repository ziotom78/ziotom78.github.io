<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2025-07-21T16:41:00+02:00</updated><id>/feed.xml</id><title type="html">Maurizio’s blog</title><subtitle>My personal blog, where I write about stuff related to my work and my hobbies.</subtitle><entry><title type="html">Making Sense of Polarization with Ludwig’s Third Convention</title><link href="/electromagnetics/2025/07/17/ludwig-polarization-definition.html" rel="alternate" type="text/html" title="Making Sense of Polarization with Ludwig’s Third Convention" /><published>2025-07-17T00:00:00+02:00</published><updated>2025-07-17T00:00:00+02:00</updated><id>/electromagnetics/2025/07/17/ludwig-polarization-definition</id><content type="html" xml:base="/electromagnetics/2025/07/17/ludwig-polarization-definition.html"><![CDATA[<h1 id="the-problem-with-spherical-coordinates">The problem with spherical coordinates</h1>

<p>In antenna analysis, you often find that the electromagnetic field radiated by an antenna is expressed using a spherical reference system, where the antenna lies at the centre. The usual approach here is to decompose $\vec E$ and $\vec H$ using the standard spherical basis vectors given by
<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mover accent="true"><mi>e</mi><mo>^</mo></mover><mi>r</mi></msub><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>sin</mi><mo>⁡</mo><mi>θ</mi><mtext> </mtext><mi>cos</mi><mo>⁡</mo><mi>ϕ</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>sin</mi><mo>⁡</mo><mi>θ</mi><mtext> </mtext><mi>sin</mi><mo>⁡</mo><mi>ϕ</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo separator="true">,</mo><msub><mover accent="true"><mi>e</mi><mo>^</mo></mover><mi>θ</mi></msub><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi><mtext> </mtext><mi>cos</mi><mo>⁡</mo><mi>ϕ</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi><mtext> </mtext><mi>sin</mi><mo>⁡</mo><mi>ϕ</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo separator="true">,</mo><msub><mover accent="true"><mi>e</mi><mo>^</mo></mover><mi>ϕ</mi></msub><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>sin</mi><mo>⁡</mo><mi>ϕ</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mi>ϕ</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">
\hat e_r = \begin{pmatrix}
\sin\theta\,\cos\phi\\
\sin\theta\,\sin\phi\\
\cos\theta
\end{pmatrix},
\hat e_\theta = \begin{pmatrix}
\cos\theta\,\cos\phi\\
\cos\theta\,\sin\phi\\
-\sin\theta
\end{pmatrix},
\hat e_\phi = \begin{pmatrix}
-\sin\phi\\
\cos\phi\\
0
\end{pmatrix}.
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault">e</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">^</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8100000000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">ϕ</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">ϕ</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8100000000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault">e</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">^</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8100000000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">ϕ</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">ϕ</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8100000000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault">e</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">^</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">ϕ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8100000000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">ϕ</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">ϕ</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8100000000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span></span></span></span></span></p>

<p>These vectors form a local orthonormal frame ($\hat e_r \perp \hat e_\theta \perp \hat e_\phi$) with the following properties:</p>

<ol>
  <li>$\hat e_r$ is always aligned towards the direction represented by the colatitude $\theta$ and the longitude $\phi$.</li>
  <li>$\hat e_\theta$ points in the direction of increasing $\theta$ (southward), so that $\theta = 0$ is the North Pole, $\theta = 90^\circ$ is the Equator, and $\theta = 180^\circ$ is the South Pole.</li>
  <li>$\hat e_\phi$ points in the direction of increasing $\phi$ (eastward), so that $\phi = 0$ points along the $x$ axis, $\phi = 90^\circ$ points towards the $y$ axis, and so on.</li>
</ol>

<p>One drawback of this representation is that the directions of $\hat e_\theta$ and $\hat e_\phi$ change rapidly near the poles, making polarization analysis less intuitive in those regions. Moreover, they may not be aligned with the physical polarization direction of the antenna.</p>

<h1 id="ludwigs-third-convention">Ludwig’s third convention</h1>

<p>To overcome these problems people often use <a href="https://ieeexplore.ieee.org/document/1140406">Ludwig’s third convention</a>, which defines a “co-polar” axis and a “cross-polar” axis. These terms relate to how an antenna transmits a polarized signal. Ideally, the polarization is preserved in transmission (co-polar), but in practice, some unwanted radiation leaks into the perpendicular direction (cross-polar). Cross-polarization should ideally be zero, so antenna designs aim to minimize it. Ludwig’s convention helps to properly disentangle these two contributions, thus easing the job.</p>

<p>I often use this convention, and frequently feel the need to have a visual tool that shows how it works. To help visualize this convention, I developed a JavaScript tool that lets you explore how the co- and cross-polarization axes behave.</p>

<p>The plain definition from Ludwig’s paper is the following: in the far field, Ludwig proposed to decompose the electromagnetic field \(\vec E\) into two perpendicular directions called \(E_\text{co} \hat e_\text{co}\) (co-polar) and \(E_\text{cx} \hat e_\text{cx}\) (cross-polar), where the two basis vectors $\hat e_\text{co}$ and $\hat e_\text{cx}$ are defined in this way:
<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mover accent="true"><mi>e</mi><mo>^</mo></mover><mtext>co</mtext></msub><mo>=</mo><mi>cos</mi><mo>⁡</mo><mi>ϕ</mi><mo>⋅</mo><msub><mover accent="true"><mi>e</mi><mo>^</mo></mover><mi>θ</mi></msub><mo>−</mo><mi>sin</mi><mo>⁡</mo><mi>ϕ</mi><mo>⋅</mo><msub><mover accent="true"><mi>e</mi><mo>^</mo></mover><mi>ϕ</mi></msub><mo separator="true">,</mo><mspace width="1em"></mspace><msub><mover accent="true"><mi>e</mi><mo>^</mo></mover><mtext>cx</mtext></msub><mo>=</mo><mi>sin</mi><mo>⁡</mo><mi>ϕ</mi><mo>⋅</mo><msub><mover accent="true"><mi>e</mi><mo>^</mo></mover><mi>θ</mi></msub><mo>+</mo><mi>cos</mi><mo>⁡</mo><mi>ϕ</mi><mo>⋅</mo><msub><mover accent="true"><mi>e</mi><mo>^</mo></mover><mi>ϕ</mi></msub><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">
\hat e_\text{co} = \cos\phi \cdot \hat e_\theta - \sin\phi \cdot \hat e_\phi, \quad
\hat e_\text{cx} = \sin\phi \cdot \hat e_\theta + \cos\phi \cdot \hat e_\phi.
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault">e</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">^</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord mtight">co</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">ϕ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault">e</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">^</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">ϕ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault">e</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">^</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">ϕ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault">e</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">^</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord mtight">cx</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">ϕ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault">e</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">^</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">ϕ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault">e</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">^</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">ϕ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord">.</span></span></span></span></span>
It is clear from this formulation that they lie on the $\theta\phi$ plane and are thus orthogonal to $\hat e_r$.</p>

<p>In the context of antenna design, Ludwig’s definition is convenient when one wants to quantify the emission of some antenna. In this case, the antenna is placed at the origin, and the problem is to write down the electric field $\vec E$ in the far field, where $\vec E$ has no component along $\hat e_r$ ($\vec E \cdot \hat e_r = 0$). Thus, $\vec E$ can be written as a combination of $\hat e_\text{co}$ and $\hat e_\text{cx}$.</p>

<p>If we consider a direction $(\theta, \phi)$ around the antenna, the vector $\hat e_r$ represents the direction of propagation of the electromagnetic wave and is parallel to $\vec k$, while $\hat e_\text{co}$ and $\hat e_\text{cx}$ are perpendicular to it.</p>

<h1 id="exploring-ludwigs-basis">Exploring Ludwig’s basis</h1>

<p>To fully grasp the significance of Ludwig’s convention, I created an interactive visualization of this configuration, which appears below.</p>

<p>The thin black cylinder represents the so-called “boresight”, which is where a directional antenna emits most of its energy. The gray cylinder perpendicular to the boresight represents the direction of the electric vector $\vec E$ along the boresight (its polarization direction). The two sliders let you modify $\theta$ and $\phi$. Try changing $\theta$ and $\phi$ to see how the co- and cross-polar vectors rotate in space and remain orthogonal to the direction of propagation.</p>

<p>The first nice property of this decomposition is that, near the boresight (where $\theta \approx 0$), the co-polar axis aligns with the polarization axis by design. This makes interpretation of antenna measurements simpler: as one of the guiding criteria in antenna design is to minimize the amount of cross-polarization, a simple rule of thumb is to minimize $E_\text{cx}$ around the boresight. (Forcing it to be equal to zero <em>everywhere</em> however would be too strict! Far from the boresight it’s hard to tell to what extent $\hat e_\text{co}$ is aligned with the polarization direction, as you can easily verify using the widget below.)</p>

<p>Another feature is that the only pole where polarization is undefined is along the <em>nadir</em> (the direction opposed to the boresight), while the <em>zenith</em> (aligned with the boresight) is well-behaved.</p>

<style>
.slider-row {
  display: flex;
  align-items: center;
  gap: 0.5em;
  margin-bottom: 0.5em;
}

.slider-row label {
  min-width: 110px;
}

.value-display {
  display: inline-block;
  width: 3ch; /* enough space for 3 digits (e.g., "180") */
  text-align: right;
}
</style>

<div id="viewer" style="width: 100%; height: 100vh; position: relative;"></div>

<script type="module">
  import { initLudwigViewer } from '/js/ludwig.js';
  initLudwigViewer('viewer');
</script>

<h1 id="converting-back-and-forth-between-the-spherical-basis-and-ludwigs">Converting back and forth between the spherical basis and Ludwig’s</h1>

<p>Assume that we have an electric field $\vec E$. We can decompose it on the spherical basis:
\(\vec E = E_r\,\hat e_r + E_\theta\,\hat e_\theta + E_\phi\,\hat e_\phi.\); let’s assume that we are in the far field, so $E_r = 0$.</p>

<p>If we write the expression that transforms $\vec E$ from the polar basis to Ludwig’s basis:
<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>E</mi><mtext>co</mtext></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>E</mi><mtext>cx</mtext></msub></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mi>ϕ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>sin</mi><mo>⁡</mo><mi>ϕ</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>sin</mi><mo>⁡</mo><mi>ϕ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mi>ϕ</mi></mrow></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>E</mi><mi>θ</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>E</mi><mi>ϕ</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mi>R</mi><mo stretchy="false">(</mo><mi>ϕ</mi><mo stretchy="false">)</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>E</mi><mi>θ</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>E</mi><mi>ϕ</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">
\begin{pmatrix}
E_\text{co}\\
E_\text{cx}
\end{pmatrix} = \begin{pmatrix}
\cos\phi &amp;-\sin\phi\\
\sin\phi &amp;\cos\phi
\end{pmatrix}
\begin{pmatrix}
E_\theta\\
E_\phi
\end{pmatrix} =
R(\phi) \begin{pmatrix}
E_\theta\\
E_\phi
\end{pmatrix},
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord mtight">co</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord mtight">cx</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">ϕ</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">ϕ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">ϕ</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">ϕ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">ϕ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mopen">(</span><span class="mord mathdefault">ϕ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">ϕ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span></span></span></span></span>
then it is evident that the $(E_\text{co}\ E_\text{cx})$ vector is just a rotation of $(E_\theta\ E_\phi)$ by the angle $\phi$ on the plane tangent to the sphere. From this, it is trivial to convert back from Ludwig’s convention to spherical coordinates:
<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>E</mi><mi>θ</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>E</mi><mi>ϕ</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mi>R</mi><mo stretchy="false">(</mo><mo>−</mo><mi>ϕ</mi><mo stretchy="false">)</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>E</mi><mtext>co</mtext></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>E</mi><mtext>cx</mtext></msub></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mi>ϕ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>sin</mi><mo>⁡</mo><mi>ϕ</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>sin</mi><mo>⁡</mo><mi>ϕ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mi>ϕ</mi></mrow></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>E</mi><mtext>co</mtext></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>E</mi><mtext>cx</mtext></msub></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">
\begin{pmatrix}
E_\theta\\
E_\phi
\end{pmatrix} =
R(-\phi) \begin{pmatrix}
E_\text{co}\\
E_\text{cx}
\end{pmatrix} =
\begin{pmatrix}
\cos\phi &amp;\sin\phi\\
-\sin\phi &amp;\cos\phi
\end{pmatrix}
\begin{pmatrix}
E_\text{co}\\
E_\text{cx}
\end{pmatrix}.
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">ϕ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mopen">(</span><span class="mord">−</span><span class="mord mathdefault">ϕ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord mtight">co</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord mtight">cx</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">ϕ</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">ϕ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">ϕ</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">ϕ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord mtight">co</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord mtight">cx</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span></span></span></span></span></p>

<h1 id="conclusions">Conclusions</h1>

<p>Ludwig’s third convention offers a practical way for analyzing antenna polarization in the far field, as it prevents a singularity along the boresight direction and provides a natural way to think of “co-polar” and “cross-polar” directions. These are some of the reasons why it is widely used in antenna pattern measurements and satellite communications.</p>

<h1 id="appendix">Appendix</h1>

<p>I found useful to rewrite $\hat e_\text{co}$ and $\hat e_\text{cx}$ in terms of the three vectors $\hat e_x$, $\hat e_y$, and $\hat e_z$, as I needed these formulae to implement the JavaScript widget above. Here are the full expressions for your convenience:</p>

<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mover accent="true"><mi>e</mi><mo>^</mo></mover><mtext>co</mtext></msub><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi><msup><mo><mi>cos</mi><mo>⁡</mo></mo><mn>2</mn></msup><mi>ϕ</mi><mo>+</mo><msup><mo><mi>sin</mi><mo>⁡</mo></mo><mn>2</mn></msup><mi>ϕ</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo stretchy="false">(</mo><mi>cos</mi><mo>⁡</mo><mi>θ</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi>cos</mi><mo>⁡</mo><mi>ϕ</mi><mi>sin</mi><mo>⁡</mo><mi>ϕ</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>sin</mi><mo>⁡</mo><mi>θ</mi><mi>cos</mi><mo>⁡</mo><mi>ϕ</mi></mrow></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo separator="true">,</mo><msub><mover accent="true"><mi>e</mi><mo>^</mo></mover><mtext>cx</mtext></msub><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo stretchy="false">(</mo><mi>c</mi><mi>o</mi><mi>s</mi><mi>θ</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi>cos</mi><mo>⁡</mo><mi>ϕ</mi><mi>sin</mi><mo>⁡</mo><mi>ϕ</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msup><mo><mi>cos</mi><mo>⁡</mo></mo><mn>2</mn></msup><mi>ϕ</mi><mo>+</mo><msup><mo><mi>sin</mi><mo>⁡</mo></mo><mn>2</mn></msup><mi>ϕ</mi><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>sin</mi><mo>⁡</mo><mi>θ</mi><mi>sin</mi><mo>⁡</mo><mi>ϕ</mi></mrow></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">
\hat e_\text{co} = \begin{pmatrix}
\cos\theta\cos^2\phi + \sin^2\phi\\
(\cos\theta - 1)\cos\phi\sin\phi\\
-\sin\theta\cos\phi
\end{pmatrix},
\hat e_\text{cx} = \begin{pmatrix}
(cos\theta - 1)\cos\phi\sin\phi\\
\cos^2\phi + \sin^2\phi\cos\theta\\
-\sin\theta\sin\phi
\end{pmatrix}.
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault">e</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">^</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord mtight">co</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.6318680000000003em;vertical-align:-1.565934em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8100000000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0659340000000004em;"><span style="top:-4.194066em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">cos</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">ϕ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop"><span class="mop">sin</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.871868em;"><span style="top:-3.12076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">ϕ</span></span></span><span style="top:-2.994066em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">ϕ</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">ϕ</span></span></span><span style="top:-1.7940660000000002em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">ϕ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.565934em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8100000000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault">e</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">^</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord mtight">cx</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.6318680000000008em;vertical-align:-1.5659340000000004em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8100000000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0659340000000004em;"><span style="top:-4.2259340000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">ϕ</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">ϕ</span></span></span><span style="top:-2.9940659999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop">cos</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">ϕ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop"><span class="mop">sin</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.871868em;"><span style="top:-3.12076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">ϕ</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-1.7940659999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">ϕ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5659340000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8100000000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span></span></span></span></span></p>]]></content><author><name></name></author><category term="electromagnetics" /><summary type="html"><![CDATA[The problem with spherical coordinates]]></summary></entry><entry><title type="html">Multilingual CVs</title><link href="/typesetting/2025/05/07/multilingual-cvs-with-typst.html" rel="alternate" type="text/html" title="Multilingual CVs" /><published>2025-05-07T00:00:00+02:00</published><updated>2025-05-07T00:00:00+02:00</updated><id>/typesetting/2025/05/07/multilingual-cvs-with-typst</id><content type="html" xml:base="/typesetting/2025/05/07/multilingual-cvs-with-typst.html"><![CDATA[<p>One requirement of my employer (the University of Milan) is that you upload your CV on your institutional page in <em>two</em> copies: one in Italian and one in English.</p>

<p>My first approach was to keep two documents: one in Italian and another in English. Every time I added/modified an entry to the CV, I also had to remember to update the English translation. This worked, but it was pretty dull and cumbersome, as this required me to find the right spot to modify the text twice: first in <code class="language-plaintext highlighter-rouge">cv-ita.tex</code>, then in <code class="language-plaintext highlighter-rouge">cv-eng.tex</code>. Moreover, complex modifications could require me to jump back and forth between the two files a few times.</p>

<h1 id="latex-to-the-rescue">LaTeX to the rescue</h1>

<p>Then, one day, I realized that there was a better solution. TeX supports the <code class="language-plaintext highlighter-rouge">\ifx</code> command, which permits conditional branches and could let me keep together the Italian and English text. The trick is to comment/uncomment a <code class="language-plaintext highlighter-rouge">\def\useitalian{1}</code> instruction and then fill the remainder of the file with <code class="language-plaintext highlighter-rouge">\ifx\useitalian\undefined</code>…<code class="language-plaintext highlighter-rouge">\else</code>…<code class="language-plaintext highlighter-rouge">\fi</code>, like in the following example:</p>

<div class="language-latex highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">\documentclass</span><span class="p">{</span>article<span class="p">}</span>

<span class="c">% Uncomment to get a CV in Italian</span>
<span class="c">%\def\useitalian{1}</span>

<span class="k">\usepackage</span><span class="p">{</span>polyglossia<span class="p">}</span>

<span class="k">\ifx\useitalian\undefined</span>
<span class="k">\setdefaultlanguage</span><span class="p">{</span>english<span class="p">}</span>
<span class="k">\else</span>
<span class="k">\setdefaultlanguage</span><span class="p">{</span>italian<span class="p">}</span>
<span class="k">\fi</span>

<span class="nt">\begin{document}</span>

<span class="k">\ifx\useitalian\undefined</span>
<span class="k">\title</span><span class="p">{</span>My CV<span class="p">}</span>
<span class="k">\else</span>
<span class="k">\title</span><span class="p">{</span>Il mio CV<span class="p">}</span>
<span class="k">\fi</span>

<span class="k">\author</span><span class="p">{</span>Maurizio Tomasi<span class="p">}</span>
<span class="k">\maketitle</span>

<span class="k">\ifx\useitalian\undefined</span>
English text
<span class="k">\else</span>
Testo in italiano
<span class="k">\fi</span>

<span class="nt">\end{document}</span>
</code></pre></div></div>

<p>If you compile this file with <code class="language-plaintext highlighter-rouge">latexmk --lualatex cv.tex</code>, you will end up with this:</p>

<p><img src="/assets/2025-05-07-multilingual-cvs-with-typst/latex-title-en.png" alt="" /></p>

<p>But if you remove the comment from the line with <code class="language-plaintext highlighter-rouge">\def\useitalian{1}</code>, you will get a document in Italian:</p>

<p><img src="/assets/2025-05-07-multilingual-cvs-with-typst/latex-title-it.png" alt="" /></p>

<p>With the new setup, things worked pretty well. However, the presence of <code class="language-plaintext highlighter-rouge">\ifx\useitalian\undefined</code> in the LaTeX source was a bit heavy to read, and the text did not flow as pleasantly as I would have liked.</p>

<h1 id="typst">Typst</h1>

<p>Several months ago, I heard of <a href="https://typst.app/">Typst</a>, a new typesetting language that aims to provide a better way to produce PDF documents. At the time, I was intrigued enough to have a look at the documentation, but what I found was not sufficient to make the switch from LaTeX:</p>

<ul>
  <li>I am too accustomed to writing equations using LaTeX syntax, and while Typst uses a much nicer and friendlier syntax, it is incompatible.</li>
  <li>If you submit a paper to a scientific journal, you must submit it as a Microsoft Word document (standard in the Humanities) or LaTeX (the <em>de facto</em> rule in Physics).</li>
</ul>

<p>There is also the significant downside that Typst can only produce PDF files at the moment. (HTML output is underway, and once it is available, Typst could become a viable alternative to Markdown or Restructured Text!)</p>

<p>However, for CVs, it seems perfect:</p>

<ul>
  <li>The quality of the output is excellent.</li>
  <li>Unlike LaTeX, Typst implements a <em>real</em> programming language: you can write text <em>and</em> code in your <code class="language-plaintext highlighter-rouge">.typ</code> files to generate text automatically.</li>
</ul>

<p>So I decided to play with Typst to convert my CV. An update to it was long overdue, and it would have been nice to compare Typst with LaTeX.</p>

<h1 id="from-latex-to-typst">From LaTeX to Typst</h1>

<p>I created my LaTeX CV using <a href="https://github.com/posquit0/Awesome-CV">Awesome CV</a>, so I started looking for something similar. I found <a href="https://typst.app/universe/package/modern-cv/">modern-cv</a>, which presents itself as “a modern resume template based on the Awesome-CV Latex template”: good!</p>

<p>It was trivial to start working. The following command creates a folder with an initial template in <code class="language-plaintext highlighter-rouge">resume.typ</code> and a few ancillary files:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>typst init @preview/modern-cv:0.8.0
</code></pre></div></div>

<p>Then, in <code class="language-plaintext highlighter-rouge">resume.typ</code> I implemented a simple function that takes two inputs (<code class="language-plaintext highlighter-rouge">en_text</code> and <code class="language-plaintext highlighter-rouge">it_text</code>) and injects in the output either one or another, depending on the value of a global variable <code class="language-plaintext highlighter-rouge">lang</code>:</p>

<pre><code class="language-typst">#let text(en_text, it_text) = {
  if lang == "en" {
    en_text
  } else if lang == "it" {
    it_text
  } else {
    "Language not supported: " + lang
  }
}
</code></pre>

<p>To set the variable <code class="language-plaintext highlighter-rouge">lang</code>, I chose to use <a href="https://github.com/casey/just">Just</a> to create a <code class="language-plaintext highlighter-rouge">config.typ</code> file containing its definition. The following is the content of my <code class="language-plaintext highlighter-rouge">Justfile</code>:</p>

<pre><code class="language-just">make-en:
    echo '#let lang = "en"' &gt; config.typ
    typst compile resume.typ resume_en.pdf

make-it:
    echo '#let lang = "it"' &gt; config.typ
    typst compile resume.typ resume_it.pdf
</code></pre>

<p>Then, in <code class="language-plaintext highlighter-rouge">resume.typ</code>, I load the value of <code class="language-plaintext highlighter-rouge">lang</code> from <code class="language-plaintext highlighter-rouge">config.typ</code>, so that the beginning of the file is now</p>

<pre><code class="language-typst">#import "@preview/modern-cv:0.8.0": *
#import "config.typ": lang

#let text(en_text, it_text) = {
  if lang == "en" {
    en_text
  } else if lang == "it" {
    it_text
  } else {
    // Default or error message if language is not set correctly
    "Language not supported: " + lang
  }
}

// Etc.
</code></pre>

<p>It is now possible to use the <code class="language-plaintext highlighter-rouge">text()</code> function in the remainder of the file. Typst requires you to prepend functions with the <code class="language-plaintext highlighter-rouge">#</code> sign to distinguish them from plain text that must end up in the PDF, so the following is an example:</p>

<pre><code class="language-typst">= #text("Positions", "Carriera")

#resume-entry(
  title: text("Associate professor", "Professore associato"),
  location: text("University of Milan", "Università degli Studi di Milano"),
  date: "2020 –",
  description: text("Full-time position", "Posizione a tempo pieno")
)
</code></pre>

<p>A few notes:</p>

<ul>
  <li>A line beginning with <code class="language-plaintext highlighter-rouge">=</code> identifies a new section, like <code class="language-plaintext highlighter-rouge">#</code> does in Markdown</li>
  <li><code class="language-plaintext highlighter-rouge">#resume-entry</code> tells Typst that this is a function call to <code class="language-plaintext highlighter-rouge">resume-entry</code>. Within the parentheses I specify the parameters to the functions, and in this case I do not need to prepend <code class="language-plaintext highlighter-rouge">text</code> with <code class="language-plaintext highlighter-rouge">#</code>, because I am already inside some code.</li>
</ul>

<p>Typst lets you to specify formatted text as the parameter for a function by enclosing it into square brackets. This works well when the text is long and you want to split it into several lines:</p>

<pre><code class="language-typst">= #text("Research", "Ricerca")

#text([
I am an instrumental/computational physicist and am mostly
interested in instrumentation for radioastronomy, in
particular in the context of CMB cosmology.
], [
Sono un fisico sperimentale/computazionale interessato
soprattutto nella strumentazione per la radioastronomia,
in particolare nel contesto della cosmologia della CMB.
])
</code></pre>

<h1 id="the-result">The result</h1>

<p>If I run</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>just make-en
</code></pre></div></div>

<p>in almost no time (Typst is much faster than LaTeX!) I get the file <code class="language-plaintext highlighter-rouge">resume-en.pdf</code>:</p>

<p><img src="/assets/2025-05-07-multilingual-cvs-with-typst/resume-en.png" alt="" /></p>

<p>If I instead run</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>just make-it
</code></pre></div></div>

<p>I get the file <code class="language-plaintext highlighter-rouge">resume-it.pdf</code>:</p>

<p><img src="/assets/2025-05-07-multilingual-cvs-with-typst/resume-it.png" alt="" /></p>

<h1 id="conclusions">Conclusions</h1>

<p>I am delighted with the result! Typst’s syntax is elegant and resembles Markdown, but it hides a powerful programming language. (People even implemented a <a href="https://github.com/SeniorMars/typst-raytracer/blob/main/mandel.typ">Mandelbrot calculator</a> using it!)</p>

<p>At the moment, only PDF output is supported, and the syntax for equations differs from LaTeX, which limits its scope. However, if this is of no bother to you, you should try it!</p>]]></content><author><name></name></author><category term="typesetting" /><summary type="html"><![CDATA[One requirement of my employer (the University of Milan) is that you upload your CV on your institutional page in two copies: one in Italian and one in English.]]></summary></entry><entry><title type="html">Use of `unsigned int` in C++</title><link href="/c++/2025/02/02/unsigned-and-c++.html" rel="alternate" type="text/html" title="Use of `unsigned int` in C++" /><published>2025-02-02T00:00:00+01:00</published><updated>2025-02-02T00:00:00+01:00</updated><id>/c++/2025/02/02/unsigned-and-c++</id><content type="html" xml:base="/c++/2025/02/02/unsigned-and-c++.html"><![CDATA[<p>When learning to use vectors in C++, it is common for students to encounter certain issues and warnings while writing their code. One such issue is the warning that appears when using a signed integer to loop through a vector, like the following example shows:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">vector</span> <span class="n">v</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">};</span>

    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">{};</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">v</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">v</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>When compiling the code using the <code class="language-plaintext highlighter-rouge">-Wall</code> flag, the compiler generates the following warning:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ g++ -o -g3 -Wall --pedantic test test.cpp
test.cpp: In function ‘int main()’:
test.cpp:9:18: warning: comparison of integer expressions of different signedness: ‘int’ and ‘std::vector&lt;int, std::allocator&lt;int&gt; &gt;::size_type’ {aka ‘long unsigned int’} [-Wsign-compare]
    9 |   for(int i{}; i &lt; v.size(); ++i) {
      |                ~~^~~~~~~~~~
/usr/bin/ld: test: _ZSt4cout: invalid version 2 (max 0)
/usr/bin/ld: test: error adding symbols: bad value
collect2: error: ld returned 1 exit status
</code></pre></div></div>

<p>The warning is generated because <code class="language-plaintext highlighter-rouge">std::vector::size()</code> returns an <em>unsigned</em> integer, while the loop variable <code class="language-plaintext highlighter-rouge">i</code> is a <em>signed</em> integer. (This is exactly what the compiler prints, but it seems that students do not like to carefully read compiler’s messages!) When explaining this error, I always mention that <code class="language-plaintext highlighter-rouge">size()</code> should actually have been declared as <code class="language-plaintext highlighter-rouge">int</code> by the C++ standard.</p>

<p>One of my students thought more about this and sent me this email:</p>

<blockquote>
  <p>…at first glance it doesn’t seem entirely unreasonable to use an index variable without a sign for array and vector dimensions. A vector of dimension -5 doesn’t make sense, so it would seem reasonable to remove ambiguity on the sign. I think the problem actually concerns managing vectors and arrays, because using an unsigned value, even when doing a loop for example, requires casting.</p>
</blockquote>

<p>He’s right: using a <em>signed</em> integer to hold the number of items in a vector would look weird! However, there are subtle problems with <code class="language-plaintext highlighter-rouge">unsigned</code> integers, and the newest version of the C++ standard mandate for a new solution in the form of the new <a href="https://en.cppreference.com/w/cpp/iterator/size"><code class="language-plaintext highlighter-rouge">ssize()</code></a> function.</p>

<p>Consider a 32-bit integer, which can assume any value in the range -2,147,483,648…+2,147,483,647. If the variable <code class="language-plaintext highlighter-rouge">x</code> holds the value -2147483648 and you decrement it, causing an <em>underflow</em>, the C++ standard doesn’t specify what happens. Usually, you get the maximum value (+2147483647), but on specific machines, the program might crash or even freeze the machine (the same applies to the opposite, known as <em>overflow</em>).</p>

<p>When underflow/overflow occurs, it’s usually unintentional and a problem in 99% of cases. If possible, the solution is to declare <code class="language-plaintext highlighter-rouge">x</code> as 64-bit (using <code class="language-plaintext highlighter-rouge">int64_t</code>). If you know that <code class="language-plaintext highlighter-rouge">abs(x)</code> will always be much smaller than a billion, you can sleep peacefully.</p>

<p>Now, let’s talk about the woes of unsigned variables. There’s a significant difference in increments and decrements here, because the C++ standard <em>guarantees</em> that if you decrement an unsigned variable equal to 0, you’ll get the maximum value (which for 32-bit integers is 4294967295). If you increment the maximum value 4294967295, you’ll get zero.</p>

<p>On the one hand, this is nice because you always know what to expect. On the other hand, from an algorithmic perspective, this behavior can cause problem: in the typical lifetime of an integer variable, it happens often that its value becomes zero, and it’s not always the best thing to make a decrement (or subtraction, for that matter) <em>increase</em> the value of that variable!</p>

<p>For example, consider this code that prints the elements of an array <code class="language-plaintext highlighter-rouge">vect</code>, which uses an unsigned counter (<code class="language-plaintext highlighter-rouge">size_t</code>):</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span><span class="p">{};</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">vect</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">vect</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Because <code class="language-plaintext highlighter-rouge">vect.size()</code> already returns <code class="language-plaintext highlighter-rouge">size_t</code> (an unsigned integer), there’s no need for any cast: the program compiles without warnings and works perfectly. It seems so easy!</p>

<p>Now, suppose you must modify the code to print the vector elements in reverse order. You diligently change it to make it like this:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span><span class="p">{</span><span class="n">vect</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">};</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="o">--</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">vect</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>But the code is wrong because, in one fell swoop, you’ve introduced <em>two</em> problems:</p>

<ol>
  <li>
    <p>The loop shouldn’t print anything if the vector is empty. But in the above code, since <code class="language-plaintext highlighter-rouge">vect.size() == 0</code>, the variable <code class="language-plaintext highlighter-rouge">i</code> is initialized to the value <code class="language-plaintext highlighter-rouge">vect.size() - 1</code>, which is a huge and positive value and will cause problems in evaluating <code class="language-plaintext highlighter-rouge">vect[i]</code></p>
  </li>
  <li>
    <p>The condition <code class="language-plaintext highlighter-rouge">i &gt;= 0</code> is always true, because <code class="language-plaintext highlighter-rouge">i</code> is unsigned; thus, the statement <code class="language-plaintext highlighter-rouge">--i</code> is executed even when <code class="language-plaintext highlighter-rouge">i == 0</code>, causing an underflow and making <code class="language-plaintext highlighter-rouge">i</code> enormous. Again, <code class="language-plaintext highlighter-rouge">vect[i]</code> will cause problems in the next loop iteration.</p>
  </li>
</ol>

<p>The right way to implement reverse printing is as follows, which isn’t intuitive but at least it’s correct:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span><span class="p">(</span><span class="n">vect</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">size_t</span> <span class="n">i</span><span class="p">{</span><span class="n">vect</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">};</span>
    <span class="k">while</span><span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">vect</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="o">--</span><span class="n">i</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This is why C++20 introduced <a href="https://en.cppreference.com/w/cpp/iterator/size"><code class="language-plaintext highlighter-rouge">std::ssize()</code></a>, a <em>function</em> which returns a <em>signed</em> integer containing the number of elements in any container: a vector, an array, etc. This fantastic little function makes the code more natural when iterating forwards <em>and</em> backwards:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Forward loop. It works even if `vect` is empty</span>
<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">{};</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">ssize</span><span class="p">(</span><span class="n">vect</span><span class="p">);</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">vect</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// Backward loop. It works even if `vect` is empty</span>
<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">{</span><span class="n">std</span><span class="o">::</span><span class="n">ssize</span><span class="p">(</span><span class="n">vect</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">};</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="o">--</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">vect</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>(Alongside <code class="language-plaintext highlighter-rouge">ssize()</code>, the C++ standard mandates the presence of <code class="language-plaintext highlighter-rouge">size()</code>, which still returns an unsigned integer and is just a wrapper around <code class="language-plaintext highlighter-rouge">std::vector::size()</code>, <code class="language-plaintext highlighter-rouge">std::array::size()</code>, and so on. The <code class="language-plaintext highlighter-rouge">size()</code> function was introduced in C++17.)</p>

<p>As I hope to have explained, the problem with <code class="language-plaintext highlighter-rouge">unsigned</code> integers is that their wrapping behavior forces you to be careful every time you perform a decrement or subtraction. This problem also affects signed integers (and in some sense, it’s even more severe because the C++ standard doesn’t tell you what will happen!). Still, it occurs less frequently because it only triggers when variables take on huge values (±2 billion for 32-bit integers).</p>

<p>Using unsigned integers to indicate the number of elements in a set might seem a good idea. Still, decades of experience from thousands of programmers have shown that it’s actually <em>a bad solution</em> in practice.</p>

<p>A quick look at the way more recent languages deal with unsigned numbers reveals that the lesson seems to have been learned:</p>

<ul>
  <li>
    <p>Here is a post from the Nim programming language forum where Araq (Andras Rumpf, creator of Nim) shares his thoughts on unsigned numbers: <a href="https://forum.nim-lang.org/t/313#1631">https://forum.nim-lang.org/t/313#1631</a></p>
  </li>
  <li>
    <p>The Julia language marks a clear distinction between signed and unsigned numbers by printing the latters using hexadecimal notation: <a href="https://docs.julialang.org/en/v1/manual/integers-and-floating-point-numbers/#Integers">https://docs.julialang.org/en/v1/manual/integers-and-floating-point-numbers/#Integers</a></p>
  </li>
  <li>
    <p>The Ada language forces you to use a more verbose syntax for unsigned numbers: <a href="https://learn.adacore.com/courses/intro-to-ada/chapters/strongly_typed_language.html#unsigned-types">https://learn.adacore.com/courses/intro-to-ada/chapters/strongly_typed_language.html#unsigned-types</a>. Moreover, Ada checks underflows and overflows for signed integers, and it makes the program crash whenever one of them happens. This is almost always the best choice!</p>
  </li>
</ul>]]></content><author><name></name></author><category term="c++" /><summary type="html"><![CDATA[When learning to use vectors in C++, it is common for students to encounter certain issues and warnings while writing their code. One such issue is the warning that appears when using a signed integer to loop through a vector, like the following example shows:]]></summary></entry><entry><title type="html">Implementing x² in C++</title><link href="/c++/2024/11/07/pow-c++.html" rel="alternate" type="text/html" title="Implementing x² in C++" /><published>2024-11-07T00:00:00+01:00</published><updated>2024-11-07T00:00:00+01:00</updated><id>/c++/2024/11/07/pow-c++</id><content type="html" xml:base="/c++/2024/11/07/pow-c++.html"><![CDATA[<p>Many equations require to compute the square of some quantity <code class="language-plaintext highlighter-rouge">x</code>.
Unfortunately, C++ does not provide an operator for exponentiation like Julia or Fortran.
One can rely on two solutions:</p>

<ol>
  <li>Just multiply the value by itself: <code class="language-plaintext highlighter-rouge">x * x</code>;</li>
  <li>Use the <code class="language-plaintext highlighter-rouge">std::pow()</code> function, defined in <code class="language-plaintext highlighter-rouge">&lt;cmath&gt;</code>.</li>
</ol>

<p>The first solution has the advantage of requiring no separate <code class="language-plaintext highlighter-rouge">#import</code>, but the second one is better if the value you are going to square is not stored in a variable:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">double</span> <span class="n">result1</span><span class="p">{(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">)};</span>  <span class="c1">// Ugly to read &amp; write</span>
<span class="kt">double</span> <span class="n">result2</span><span class="p">{</span><span class="n">std</span><span class="o">::</span><span class="n">pow</span><span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">,</span> <span class="mi">2</span><span class="p">)};</span> <span class="c1">// Much better</span>
</code></pre></div></div>

<p>However, are the two solutions <em>really</em> the same? Are <code class="language-plaintext highlighter-rouge">x * x</code> and <code class="language-plaintext highlighter-rouge">std::pow(x, 2)</code> equivalent, or is there some difference?</p>

<p>Let’s write some code to benchmark the two approaches.
We compute the sum of the squares of all the integer numbers between 1 and 10 millions with both methods to determine which implementation is the fastest.
Here are the two implementations:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">double</span> <span class="nf">pow_test</span><span class="p">(</span><span class="kt">int</span> <span class="n">N</span><span class="p">)</span>  <span class="p">{</span>
  <span class="kt">double</span> <span class="n">sum</span><span class="p">{};</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">double</span> <span class="n">i</span><span class="p">{};</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="mf">1.0</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">sum</span> <span class="o">+=</span> <span class="n">pow</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">double</span> <span class="nf">times_test</span><span class="p">(</span><span class="kt">int</span> <span class="n">N</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">double</span> <span class="n">sum</span><span class="p">{};</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">double</span> <span class="n">i</span><span class="p">{};</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="mf">1.0</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">sum</span> <span class="o">+=</span> <span class="n">i</span> <span class="o">*</span> <span class="n">i</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>A good method when profiling code is to run every benchmark a few times and to take the <em>minimum</em> value among the elapsed time measurements.
So let’s write a function that does this and uses <code class="language-plaintext highlighter-rouge">&lt;chrono&gt;</code> to measure the time:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">run_benchmark</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span> <span class="kt">int</span> <span class="n">N</span><span class="p">,</span> <span class="k">auto</span> <span class="n">fn</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">array</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">duration</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span><span class="p">,</span> <span class="mi">5</span><span class="o">&gt;</span> <span class="n">samples</span><span class="p">;</span>
  <span class="kt">double</span> <span class="n">sum</span><span class="p">{};</span>

  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span><span class="p">{};</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">ssize</span><span class="p">(</span><span class="n">samples</span><span class="p">);</span> <span class="o">++</span><span class="n">k</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">const</span> <span class="k">auto</span> <span class="n">start</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">steady_clock</span><span class="o">::</span><span class="n">now</span><span class="p">();</span>
    <span class="n">sum</span> <span class="o">=</span> <span class="n">fn</span><span class="p">(</span><span class="n">N</span><span class="p">);</span>
    <span class="k">const</span> <span class="k">auto</span> <span class="n">end</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">steady_clock</span><span class="o">::</span><span class="n">now</span><span class="p">();</span>
    <span class="n">samples</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">auto</span> <span class="n">result</span><span class="p">{</span><span class="n">std</span><span class="o">::</span><span class="n">ranges</span><span class="o">::</span><span class="n">min_element</span><span class="p">(</span><span class="n">samples</span><span class="p">)};</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">format</span><span class="p">(</span><span class="s">"{}: {} s (result is {})</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="o">*</span><span class="n">result</span><span class="p">,</span> <span class="n">sum</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The full source code of the program is the following:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;array&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;chrono&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;cmath&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;format&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">double</span> <span class="nf">pow_test</span><span class="p">(</span><span class="kt">int</span> <span class="n">N</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">double</span> <span class="n">sum</span><span class="p">{};</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">double</span> <span class="n">i</span><span class="p">{};</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="mf">1.0</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">sum</span> <span class="o">+=</span> <span class="n">pow</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">double</span> <span class="nf">times_test</span><span class="p">(</span><span class="kt">int</span> <span class="n">N</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">double</span> <span class="n">sum</span><span class="p">{};</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">double</span> <span class="n">i</span><span class="p">{};</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="mf">1.0</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">sum</span> <span class="o">+=</span> <span class="n">i</span> <span class="o">*</span> <span class="n">i</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">run_benchmark</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span> <span class="kt">int</span> <span class="n">N</span><span class="p">,</span> <span class="k">auto</span> <span class="n">fn</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">array</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">duration</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span><span class="p">,</span> <span class="mi">5</span><span class="o">&gt;</span> <span class="n">samples</span><span class="p">;</span>
  <span class="kt">double</span> <span class="n">sum</span><span class="p">{};</span>

  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span><span class="p">{};</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">ssize</span><span class="p">(</span><span class="n">samples</span><span class="p">);</span> <span class="o">++</span><span class="n">k</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">const</span> <span class="k">auto</span> <span class="n">start</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">steady_clock</span><span class="o">::</span><span class="n">now</span><span class="p">();</span>
    <span class="n">sum</span> <span class="o">=</span> <span class="n">fn</span><span class="p">(</span><span class="n">N</span><span class="p">);</span>
    <span class="k">const</span> <span class="k">auto</span> <span class="n">end</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">steady_clock</span><span class="o">::</span><span class="n">now</span><span class="p">();</span>
    <span class="n">samples</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">auto</span> <span class="n">result</span><span class="p">{</span><span class="n">std</span><span class="o">::</span><span class="n">ranges</span><span class="o">::</span><span class="n">min_element</span><span class="p">(</span><span class="n">samples</span><span class="p">)};</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">format</span><span class="p">(</span><span class="s">"{}: {} s (result is {})</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="o">*</span><span class="n">result</span><span class="p">,</span> <span class="n">sum</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">const</span> <span class="kt">int</span> <span class="n">N</span><span class="p">{</span><span class="mi">10'000'000</span><span class="p">};</span>

  <span class="n">run_benchmark</span><span class="p">(</span><span class="s">"pow"</span><span class="p">,</span> <span class="n">N</span><span class="p">,</span> <span class="n">pow_test</span><span class="p">);</span>
  <span class="n">run_benchmark</span><span class="p">(</span><span class="s">"x * x"</span><span class="p">,</span> <span class="n">N</span><span class="p">,</span> <span class="n">times_test</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>(The code uses <code class="language-plaintext highlighter-rouge">&lt;format&gt;</code> and <code class="language-plaintext highlighter-rouge">std::ranges::min_element</code>, so be sure to use the <code class="language-plaintext highlighter-rouge">-std=c++23</code> flag and a reasonably recent C++ compiler; mine is GCC 14.2.1.)</p>

<p>The results on my laptop are the following:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pow: 0.184192s s (result is 333333283333717098496)
x * x: 0.0386399s s (result is 333333283333717098496)
</code></pre></div></div>

<p>Wow! So <code class="language-plaintext highlighter-rouge">x * x</code> is nearly five times faster than <code class="language-plaintext highlighter-rouge">pow</code>! What’s happened?</p>

<p>Using GCC 14.2, the line <code class="language-plaintext highlighter-rouge">sum += pow(i, 2.0)</code> produces the following machine code:</p>

<pre><code class="language-assembler">movsd   xmm0, QWORD PTR .LC7[rip]
mov     rax, QWORD PTR [rbp-16]
movapd  xmm1, xmm0
movq    xmm0, rax
call    pow
movsd   xmm1, QWORD PTR [rbp-8]
addsd   xmm0, xmm1
movsd   QWORD PTR [rbp-8], xmm0
</code></pre>

<p>So, as expected, the machine code loads the parameters to <code class="language-plaintext highlighter-rouge">pow</code> into registers and then calls the <code class="language-plaintext highlighter-rouge">pow</code> function.
And calling a function is expensive!</p>

<p>The line <code class="language-plaintext highlighter-rouge">sum += x * x</code> produces this:</p>

<pre><code class="language-assembler">movsd   xmm0, QWORD PTR [rbp-16]
mulsd   xmm0, xmm0
movsd   xmm1, QWORD PTR [rbp-8]
addsd   xmm0, xmm1
movsd   QWORD PTR [rbp-8], xmm0
</code></pre>

<p>which has no <code class="language-plaintext highlighter-rouge">call</code> instruction: it is just the plain implementation of the operation <code class="language-plaintext highlighter-rouge">x * x</code>, using <a href="https://www.felixcloutier.com/x86/mulsd"><code class="language-plaintext highlighter-rouge">mulsd</code></a>.</p>

<p>The take-away message is: when computing the square of a number in C++ you should always use <code class="language-plaintext highlighter-rouge">x * x</code>.</p>

<p>But what about the ugly line we saw above:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">double</span> <span class="n">result1</span><span class="p">{(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">)};</span>
</code></pre></div></div>

<p>We can improve the code via a template function:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="n">T</span> <span class="nf">square</span><span class="p">(</span><span class="n">T</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>so that the line becomes</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">double</span> <span class="n">result1</span><span class="p">{</span><span class="n">square</span><span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">)};</span>
</code></pre></div></div>

<p>Adding a corresponding case to the benchmark above produces the following results:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pow: 0.176948s s (result is 333333283333717098496)
x * x: 0.0394336s s (result is 333333283333717098496)
square: 0.0399737s s (result is 333333283333717098496)
</code></pre></div></div>

<p>which shows no significant loss of performance when using a <code class="language-plaintext highlighter-rouge">template</code>.
If you do not want to use templates because you are sure you will always use <code class="language-plaintext highlighter-rouge">double</code> values, you can define <code class="language-plaintext highlighter-rouge">inline double square(double x)</code>, and the benchmark result will be the same.</p>]]></content><author><name></name></author><category term="c++" /><summary type="html"><![CDATA[Many equations require to compute the square of some quantity x. Unfortunately, C++ does not provide an operator for exponentiation like Julia or Fortran. One can rely on two solutions:]]></summary></entry><entry><title type="html">A tutorial about parametric constructors in Julia (2/2)</title><link href="/julia/2024/10/07/julia-parametric-constructors.html" rel="alternate" type="text/html" title="A tutorial about parametric constructors in Julia (2/2)" /><published>2024-10-07T00:00:00+02:00</published><updated>2024-10-07T00:00:00+02:00</updated><id>/julia/2024/10/07/julia-parametric-constructors</id><content type="html" xml:base="/julia/2024/10/07/julia-parametric-constructors.html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#constructors-for-parametric-types" id="markdown-toc-constructors-for-parametric-types">Constructors for parametric types</a></li>
  <li><a href="#correspondence-between-parametric-types-in-the-struct-and-in-the-constructor" id="markdown-toc-correspondence-between-parametric-types-in-the-struct-and-in-the-constructor">Correspondence between parametric types in the <code class="language-plaintext highlighter-rouge">struct</code> and in the constructor</a></li>
  <li><a href="#smart-use-of-promote" id="markdown-toc-smart-use-of-promote">Smart use of <code class="language-plaintext highlighter-rouge">promote</code></a></li>
  <li><a href="#making-unitful-compatible-types" id="markdown-toc-making-unitful-compatible-types">Making Unitful-compatible types</a></li>
  <li><a href="#use-of-kwdef" id="markdown-toc-use-of-kwdef">Use of <code class="language-plaintext highlighter-rouge">@kwdef</code></a></li>
  <li><a href="#acknowledgements" id="markdown-toc-acknowledgements">Acknowledgements</a></li>
  <li><a href="#edits" id="markdown-toc-edits">Edits</a></li>
</ul>

<p>In the <a href="/julia/2024/09/30/julia-parametric-types.html">previous blog post</a>, I have presented parametric types in Julia.
In this second part, I will explain what are the ways to initialize them properly and list a few technicalities that can sometimes cause weird behaviors.</p>

<h1 id="constructors-for-parametric-types">Constructors for parametric types</h1>

<p>In all the examples in the previous blog post, you might have noticed that we did not have to specify the type <code class="language-plaintext highlighter-rouge">T</code> when instantiating a <code class="language-plaintext highlighter-rouge">Point</code> type, neither in C++ nor Julia:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span><span class="nc"> Point</span><span class="x">{</span><span class="n">T</span><span class="x">}</span>
    <span class="n">x</span><span class="o">::</span><span class="n">T</span>
    <span class="n">y</span><span class="o">::</span><span class="n">T</span>
<span class="k">end</span>

<span class="c"># We do not write `Point{Float64}(1.0, 2.0) here:</span>
<span class="c"># Julia correctly infers that the type is `Point{Float64}`</span>
<span class="n">pt1</span> <span class="o">=</span> <span class="n">Point</span><span class="x">(</span><span class="mf">1.0</span><span class="x">,</span> <span class="mf">2.0</span><span class="x">)</span>
</code></pre></div></div>

<p>This is similar to C++, which got <a href="https://en.cppreference.com/w/cpp/language/class_template_argument_deduction">Class Template Argument Deduction (CTAD)</a> in C++17:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span>
<span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="k">struct</span> <span class="nc">Point</span> <span class="p">{</span>
  <span class="n">Point</span><span class="p">(</span><span class="n">T</span> <span class="n">ax</span><span class="p">,</span> <span class="n">T</span> <span class="n">ay</span><span class="p">)</span> <span class="o">:</span> <span class="n">x</span><span class="p">{</span><span class="n">ax</span><span class="p">},</span> <span class="n">y</span><span class="p">{</span><span class="n">ay</span><span class="p">}</span> <span class="p">{}</span>

  <span class="n">T</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">;</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// Since C++17, there is no need to write `Point&lt;double&gt;` here,</span>
  <span class="c1">// as the compiler is smart enough to deduce it</span>
  <span class="n">Point</span> <span class="n">pt</span><span class="p">{</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">};</span>

  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">pt</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="s">", "</span> <span class="o">&lt;&lt;</span> <span class="n">pt</span><span class="p">.</span><span class="n">y</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>It is important to stress that it is the responsibility of Julia’s <em>inner constructors</em> to deduce the parametric type.
Julia permits the programmer to override the default inner constructors provided by the language, but if we do so, Julia loses the ability to perform the deduction.
The point is that overriding inner constructors is very common, as it is the preferred method for performing additional safety checks on our type.
Thus, if we override an inner constructor, we must know how to “recover” parameter deduction in our implementation.</p>

<p>To better explain this issue, let’s consider some type less boring than <code class="language-plaintext highlighter-rouge">Point</code>.
We will implement a new type <code class="language-plaintext highlighter-rouge">Vehicle</code> that holds information about the mass and the number of wheels of a generic vehicle.
Here is a possible implementation:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span><span class="nc"> Vehicle</span><span class="x">{</span><span class="n">M</span> <span class="o">&lt;:</span> <span class="kt">Real</span><span class="x">,</span> <span class="n">N</span> <span class="o">&lt;:</span> <span class="kt">Integer</span><span class="x">}</span>
    <span class="n">mass</span><span class="o">::</span><span class="n">M</span>
    <span class="n">num_of_wheels</span><span class="o">::</span><span class="n">N</span>
<span class="k">end</span>
</code></pre></div></div>

<p>I used a parametric type so that we do not incur in the overhead associated with generic <code class="language-plaintext highlighter-rouge">Any</code> types.
(See the previous blog post.)
Moreover, I enforced the fact that <code class="language-plaintext highlighter-rouge">M</code> must be a floating-point type (<code class="language-plaintext highlighter-rouge">Real</code>), while <code class="language-plaintext highlighter-rouge">N</code> must be an integer by declaring two types in the parameters of the type.
The type works as expected:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">julia</span><span class="o">&gt;</span> <span class="n">Vehicle</span><span class="x">(</span><span class="mf">100.0</span><span class="x">,</span> <span class="mi">4</span><span class="x">)</span>
<span class="n">Vehicle</span><span class="x">{</span><span class="kt">Float64</span><span class="x">,</span> <span class="kt">Int64</span><span class="x">}(</span><span class="mf">100.0</span><span class="x">,</span> <span class="mi">4</span><span class="x">)</span>
</code></pre></div></div>

<p>However, this definition could be more robust, as it does not check that the mass and the number of wheels are valid.
Both should be nonzero positive numbers!
Inner constructors come to the rescue here.
You define a function with the same name as the type and place this definition <em>within</em> the <code class="language-plaintext highlighter-rouge">struct</code> itself.
Within the function, you call <code class="language-plaintext highlighter-rouge">new</code> when ready to build the new object.
The point is that your definition of the inner constructor will <em>replace Julia’s default one</em>.
In our case, we can re-implement <code class="language-plaintext highlighter-rouge">Vehicle</code> as follows:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span><span class="nc"> Vehicle</span><span class="x">{</span><span class="n">M</span> <span class="o">&lt;:</span> <span class="kt">Real</span><span class="x">,</span> <span class="n">N</span> <span class="o">&lt;:</span> <span class="kt">Integer</span><span class="x">}</span>
    <span class="n">mass</span><span class="o">::</span><span class="n">M</span>
    <span class="n">num_of_wheels</span><span class="o">::</span><span class="n">N</span>

    <span class="k">function</span><span class="nf"> Vehicle</span><span class="x">{</span><span class="n">M</span><span class="x">,</span> <span class="n">N</span><span class="x">}(</span><span class="n">m</span><span class="x">,</span> <span class="n">n</span><span class="x">)</span> <span class="k">where</span> <span class="x">{</span><span class="n">M</span><span class="x">,</span> <span class="n">N</span><span class="x">}</span>
        <span class="x">(</span><span class="n">m</span> <span class="o">&gt;</span> <span class="n">zero</span><span class="x">(</span><span class="n">m</span><span class="x">))</span> <span class="o">||</span> <span class="n">error</span><span class="x">(</span><span class="s">"Invalid negative mass </span><span class="si">$</span><span class="s">m"</span><span class="x">)</span>
        <span class="x">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="n">zero</span><span class="x">(</span><span class="n">n</span><span class="x">))</span> <span class="o">||</span> <span class="n">error</span><span class="x">(</span><span class="s">"Invalid number of wheels </span><span class="si">$</span><span class="s">n"</span><span class="x">)</span>

        <span class="c"># Note that we do *not* call `new(…)`, but</span>
        <span class="c"># `new{M, N}(…)`: there is no `new()` function within the</span>
        <span class="c"># inner constructor of a parametric type, because you are</span>
        <span class="c"># expected to pass the proper types!</span>
        <span class="k">return</span> <span class="n">new</span><span class="x">{</span><span class="n">M</span><span class="x">,</span> <span class="n">N</span><span class="x">}(</span><span class="n">m</span><span class="x">,</span> <span class="n">n</span><span class="x">)</span>
    <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>However, if we try to use this new type as we did before, we get a surprising result:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">julia</span><span class="o">&gt;</span> <span class="n">Vehicle</span><span class="x">(</span><span class="mf">100.0</span><span class="x">,</span> <span class="mi">4</span><span class="x">)</span>
<span class="n">ERROR</span><span class="o">:</span> <span class="kt">MethodError</span><span class="o">:</span> <span class="n">no</span> <span class="n">method</span> <span class="n">matching</span> <span class="n">Vehicle</span><span class="x">(</span><span class="o">::</span><span class="kt">Float64</span><span class="x">,</span> <span class="o">::</span><span class="kt">Int64</span><span class="x">)</span>
<span class="n">Stacktrace</span><span class="o">:</span>
 <span class="x">[</span><span class="mi">1</span><span class="x">]</span> <span class="n">top</span><span class="o">-</span><span class="n">level</span> <span class="n">scope</span>
   <span class="err">@</span> <span class="n">REPL</span><span class="x">[</span><span class="mi">10</span><span class="x">]</span><span class="o">:</span><span class="mi">2</span>
</code></pre></div></div>

<p>The problem is that our inner constructor does not conform to the form <code class="language-plaintext highlighter-rouge">Vehicle(…)</code> but <code class="language-plaintext highlighter-rouge">Vehicle{M, N}</code>.
The fact that <code class="language-plaintext highlighter-rouge">Vehicle</code> is a <em>parametric</em> type means that <code class="language-plaintext highlighter-rouge">M</code> and <code class="language-plaintext highlighter-rouge">N</code> should be considered as actual <em>parameters</em>, and you already know that whenever you call a function, you must provide all the parameters!
Thus, we must explicitly provide <code class="language-plaintext highlighter-rouge">M</code> and <code class="language-plaintext highlighter-rouge">N</code>:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">julia</span><span class="o">&gt;</span> <span class="n">Vehicle</span><span class="x">{</span><span class="kt">Float64</span><span class="x">,</span> <span class="kt">Int64</span><span class="x">}(</span><span class="mf">100.0</span><span class="x">,</span> <span class="mi">4</span><span class="x">)</span>
<span class="n">Vehicle</span><span class="x">{</span><span class="kt">Float64</span><span class="x">,</span> <span class="kt">Int64</span><span class="x">}(</span><span class="mf">100.0</span><span class="x">,</span> <span class="mi">4</span><span class="x">)</span>
</code></pre></div></div>

<p>Spelling out the types is boring, but it is easy to implement a constructor that is smart enough to deduce the types by itself:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span><span class="nc"> Vehicle</span><span class="x">{</span><span class="n">M</span> <span class="o">&lt;:</span> <span class="kt">Real</span><span class="x">,</span> <span class="n">N</span> <span class="o">&lt;:</span> <span class="kt">Integer</span><span class="x">}</span>
    <span class="n">mass</span><span class="o">::</span><span class="n">M</span>
    <span class="n">num_of_wheels</span><span class="o">::</span><span class="n">N</span>

    <span class="c"># Here we no longer have `{M, N}`</span>
    <span class="k">function</span><span class="nf"> Vehicle</span><span class="x">(</span><span class="n">m</span><span class="x">,</span> <span class="n">n</span><span class="x">)</span>
        <span class="x">(</span><span class="n">m</span> <span class="o">&gt;</span> <span class="n">zero</span><span class="x">(</span><span class="n">m</span><span class="x">))</span> <span class="o">||</span> <span class="n">error</span><span class="x">(</span><span class="s">"Invalid negative mass </span><span class="si">$</span><span class="s">m"</span><span class="x">)</span>
        <span class="x">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="n">zero</span><span class="x">(</span><span class="n">n</span><span class="x">))</span> <span class="o">||</span> <span class="n">error</span><span class="x">(</span><span class="s">"Invalid number of wheels </span><span class="si">$</span><span class="s">n"</span><span class="x">)</span>

        <span class="c"># Retrieve the types `M` and `N`, and pass them to `new{…}`</span>
        <span class="n">M</span> <span class="o">=</span> <span class="n">typeof</span><span class="x">(</span><span class="n">m</span><span class="x">)</span>
        <span class="n">N</span> <span class="o">=</span> <span class="n">typeof</span><span class="x">(</span><span class="n">n</span><span class="x">)</span>
        <span class="k">return</span> <span class="n">new</span><span class="x">{</span><span class="n">M</span><span class="x">,</span> <span class="n">N</span><span class="x">}(</span><span class="n">m</span><span class="x">,</span> <span class="n">n</span><span class="x">)</span>
    <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>With this constructor, everything works as expected again:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">julia</span><span class="o">&gt;</span> <span class="n">Vehicle</span><span class="x">(</span><span class="mf">100.0</span><span class="x">,</span> <span class="mi">4</span><span class="x">)</span>
<span class="n">Vehicle</span><span class="x">{</span><span class="kt">Float64</span><span class="x">,</span> <span class="kt">Int64</span><span class="x">}(</span><span class="mf">100.0</span><span class="x">,</span> <span class="mi">4</span><span class="x">)</span>
</code></pre></div></div>

<p>You might fear that this new constructor might not prevent whoever is going to create a new <code class="language-plaintext highlighter-rouge">Vehicle</code> object from doing something silly.
Shouldn’t we add something like <code class="language-plaintext highlighter-rouge">(N &lt;: Integer) || error("N is of the wrong type")</code> in the constructor, to be sure that the user does not use a floating-point number for the number of wheels?</p>

<p>Fortunately, there is no need to do so:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">julia</span><span class="o">&gt;</span> <span class="n">Vehicle</span><span class="x">(</span><span class="mi">100</span><span class="x">,</span> <span class="mf">4.1</span><span class="x">)</span>
<span class="n">ERROR</span><span class="o">:</span> <span class="kt">TypeError</span><span class="o">:</span> <span class="k">in</span> <span class="n">Vehicle</span><span class="x">,</span> <span class="k">in</span> <span class="n">N</span><span class="x">,</span> <span class="n">expected</span> <span class="n">N</span><span class="o">&lt;:</span><span class="kt">Integer</span><span class="x">,</span> <span class="n">got</span> <span class="kt">Type</span><span class="x">{</span><span class="kt">Float64</span><span class="x">}</span>
<span class="n">Stacktrace</span><span class="o">:</span>
 <span class="x">[</span><span class="mi">1</span><span class="x">]</span> <span class="n">Vehicle</span><span class="x">(</span><span class="n">m</span><span class="o">::</span><span class="kt">Int64</span><span class="x">,</span> <span class="n">n</span><span class="o">::</span><span class="kt">Float64</span><span class="x">)</span>
   <span class="err">@</span> <span class="n">Main</span> <span class="o">./</span><span class="n">REPL</span><span class="x">[</span><span class="mi">1</span><span class="x">]</span><span class="o">:</span><span class="mi">12</span>
 <span class="x">[</span><span class="mi">2</span><span class="x">]</span> <span class="n">top</span><span class="o">-</span><span class="n">level</span> <span class="n">scope</span>
   <span class="err">@</span> <span class="n">REPL</span><span class="x">[</span><span class="mi">3</span><span class="x">]</span><span class="o">:</span><span class="mi">1</span>
</code></pre></div></div>

<p>The line <code class="language-plaintext highlighter-rouge">./REPL[1]:12</code> indicates that the error was originated in the statement <code class="language-plaintext highlighter-rouge">new{M, N}(m, n)</code>: <code class="language-plaintext highlighter-rouge">new</code> checked the consistency of the types for us, and our implementation of the constructor is solid.</p>

<h1 id="correspondence-between-parametric-types-in-the-struct-and-in-the-constructor">Correspondence between parametric types in the <code class="language-plaintext highlighter-rouge">struct</code> and in the constructor</h1>

<p>We saw above that we can reproduce the behavior of Julia’s default inner constructors and make the type specification <code class="language-plaintext highlighter-rouge">{M, N}</code> in the constructor call optional.
There might be situations where it is better to let the user specify a parametric type in the inner constructor than to let Julia deduce it.</p>

<p>For instance, consider the case where you have a structure <code class="language-plaintext highlighter-rouge">Particle</code> containing the kinetic and potential energy of a particle in the local gravitational field, but the constructor only requires its mass and velocity:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="n">g</span> <span class="o">=</span> <span class="mf">9.81</span>

<span class="k">struct</span><span class="nc"> Particle</span><span class="x">{</span><span class="n">E</span> <span class="o">&lt;:</span> <span class="kt">Real</span><span class="x">}</span>
  <span class="n">kinetic_energy</span><span class="o">::</span><span class="n">E</span>
  <span class="n">potential_energy</span><span class="o">::</span><span class="n">E</span>

  <span class="k">function</span><span class="nf"> Particle</span><span class="x">{</span><span class="n">E</span><span class="x">}(</span><span class="n">mass</span><span class="x">,</span> <span class="n">velocity</span><span class="x">,</span> <span class="n">height</span><span class="x">)</span> <span class="k">where</span> <span class="x">{</span><span class="n">E</span><span class="x">}</span>
    <span class="n">kinetic_energy</span> <span class="o">=</span> <span class="mi">1</span><span class="o">/</span><span class="mi">2</span> <span class="o">*</span> <span class="n">mass</span> <span class="o">*</span> <span class="n">velocity</span><span class="o">^</span><span class="mi">2</span>
    <span class="n">potential_energy</span> <span class="o">=</span> <span class="n">mass</span> <span class="o">*</span> <span class="n">g</span> <span class="o">*</span> <span class="n">height</span>

    <span class="k">return</span> <span class="n">new</span><span class="x">{</span><span class="n">E</span><span class="x">}(</span><span class="n">kinetic_energy</span><span class="x">,</span> <span class="n">potential_energy</span><span class="x">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>In this case, the parameters we pass to the constructor are not the same that are going to be stored in the object itself, and thus it might make sense to force the user to spell out the type to use:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">julia</span><span class="o">&gt;</span> <span class="n">p</span> <span class="o">=</span> <span class="n">Particle</span><span class="x">{</span><span class="kt">Float32</span><span class="x">}(</span><span class="mf">1.0</span><span class="x">,</span> <span class="mf">3.0</span><span class="x">,</span> <span class="mf">2.0</span><span class="x">)</span>
<span class="n">Particle</span><span class="x">{</span><span class="kt">Float32</span><span class="x">}(</span><span class="mf">4.5f0</span><span class="x">,</span> <span class="mf">19.62f0</span><span class="x">)</span>
</code></pre></div></div>

<p>We explicitly asked Julia to store the two energies in <code class="language-plaintext highlighter-rouge">p</code> as <code class="language-plaintext highlighter-rouge">Float32</code>, regardless of the fact that the input type of all the three parameters was <code class="language-plaintext highlighter-rouge">Float64</code>.</p>

<p>For inner constructors, the type parameter <code class="language-plaintext highlighter-rouge">{E}</code> needs to be the same as the parametric type of the structure.
This might sound obvious, but there can be cases where one might want to make the constructor able to deal with a wider set of input types.</p>

<p>Assume, for instance, that you want to make <code class="language-plaintext highlighter-rouge">Particle</code> compatible with some code that expresses masses, velocities, and heights as complex numbers.
(There are plenty of mathematical artifices in the literature to solve complicated physical problems analytically, often involving complex numbers used weirdly.)
You know that you need to take the absolute values of the mass, velocity, and height to make <code class="language-plaintext highlighter-rouge">Particle</code> compute the kinetic and potential energies correctly.</p>

<p>We might think that specifying the base type for <code class="language-plaintext highlighter-rouge">Particle</code> as <code class="language-plaintext highlighter-rouge">C &lt;: Complex</code> and using <code class="language-plaintext highlighter-rouge">abs</code> where appropriate should be enough.
This will make the code behave the same as usual with real numbers and make <code class="language-plaintext highlighter-rouge">Particle</code> work with the code based on complex numbers, too.
However, we cannot specify that the constructor accepts a type <code class="language-plaintext highlighter-rouge">C &lt;: Complex</code>, as this implementation is <em>not</em> correct:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="n">g</span> <span class="o">=</span> <span class="mf">9.81</span>

<span class="k">struct</span><span class="nc"> Particle</span><span class="x">{</span><span class="n">E</span> <span class="o">&lt;:</span> <span class="kt">Real</span><span class="x">}</span>
  <span class="n">kinetic_energy</span><span class="o">::</span><span class="n">E</span>
  <span class="n">potential_energy</span><span class="o">::</span><span class="n">E</span>

  <span class="k">function</span><span class="nf"> Particle</span><span class="x">{</span><span class="n">C</span><span class="x">}(</span><span class="n">mass</span><span class="o">::</span><span class="n">C</span><span class="x">,</span> <span class="n">velocity</span><span class="o">::</span><span class="n">C</span><span class="x">,</span> <span class="n">height</span><span class="o">::</span><span class="n">C</span><span class="x">)</span> <span class="k">where</span> <span class="x">{</span><span class="n">C</span> <span class="o">&lt;:</span> <span class="kt">Complex</span><span class="x">}</span>
    <span class="n">kinetic_energy</span> <span class="o">=</span> <span class="mi">1</span><span class="o">/</span><span class="mi">2</span> <span class="o">*</span> <span class="n">abs</span><span class="x">(</span><span class="n">mass</span><span class="x">)</span> <span class="o">*</span> <span class="n">abs</span><span class="x">(</span><span class="n">velocity</span><span class="x">)</span><span class="o">^</span><span class="mi">2</span>
    <span class="n">potential_energy</span> <span class="o">=</span> <span class="n">abs</span><span class="x">(</span><span class="n">mass</span><span class="x">)</span> <span class="o">*</span> <span class="n">g</span> <span class="o">*</span> <span class="n">abs</span><span class="x">(</span><span class="n">height</span><span class="x">)</span>

    <span class="n">E</span> <span class="o">=</span> <span class="n">typeof</span><span class="x">(</span><span class="n">kinetic_energy</span><span class="x">)</span>
    <span class="k">return</span> <span class="n">new</span><span class="x">{</span><span class="n">E</span><span class="x">}(</span><span class="n">kinetic_energy</span><span class="x">,</span> <span class="n">potential_energy</span><span class="x">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This code compiles, but calling the constructor with complex parameters does not work:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">julia</span><span class="o">&gt;</span> <span class="n">Particle</span><span class="x">{</span><span class="kt">ComplexF64</span><span class="x">}(</span><span class="mf">1.0</span> <span class="o">+</span> <span class="mf">5.0</span><span class="nb">im</span><span class="x">,</span> <span class="mf">3.0</span> <span class="o">+</span> <span class="mf">4.0</span><span class="nb">im</span><span class="x">,</span> <span class="mf">2.0</span> <span class="o">+</span> <span class="mf">1.0</span><span class="nb">im</span><span class="x">)</span>
<span class="n">ERROR</span><span class="o">:</span> <span class="kt">TypeError</span><span class="o">:</span> <span class="k">in</span> <span class="n">Particle</span><span class="x">,</span> <span class="k">in</span> <span class="n">E</span><span class="x">,</span> <span class="n">expected</span> <span class="n">E</span><span class="o">&lt;:</span><span class="kt">Real</span><span class="x">,</span> <span class="n">got</span> <span class="kt">Type</span><span class="x">{</span><span class="kt">ComplexF64</span><span class="x">}</span>
<span class="n">Stacktrace</span><span class="o">:</span>
 <span class="x">[</span><span class="mi">1</span><span class="x">]</span> <span class="n">top</span><span class="o">-</span><span class="n">level</span> <span class="n">scope</span>
   <span class="err">@</span> <span class="n">REPL</span><span class="x">[</span><span class="mi">3</span><span class="x">]</span><span class="o">:</span><span class="mi">1</span>
</code></pre></div></div>

<p>Moreover, we lose the ability to use the constructor with proper parameters, because once we define an inner constructor, <em>Julia stops providing its default one</em>:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">julia</span><span class="o">&gt;</span> <span class="n">Particle</span><span class="x">{</span><span class="kt">Float64</span><span class="x">}(</span><span class="mf">1.0</span><span class="x">,</span> <span class="mf">3.0</span><span class="x">,</span> <span class="mf">2.0</span><span class="x">)</span>
<span class="n">ERROR</span><span class="o">:</span> <span class="kt">MethodError</span><span class="o">:</span> <span class="n">no</span> <span class="n">method</span> <span class="n">matching</span> <span class="n">Particle</span><span class="x">{</span><span class="kt">Float64</span><span class="x">}(</span><span class="o">::</span><span class="kt">Float64</span><span class="x">,</span> <span class="o">::</span><span class="kt">Float64</span><span class="x">,</span> <span class="o">::</span><span class="kt">Float64</span><span class="x">)</span>
<span class="n">Stacktrace</span><span class="o">:</span>
 <span class="x">[</span><span class="mi">1</span><span class="x">]</span> <span class="n">top</span><span class="o">-</span><span class="n">level</span> <span class="n">scope</span>
   <span class="err">@</span> <span class="n">REPL</span><span class="x">[</span><span class="mi">4</span><span class="x">]</span><span class="o">:</span><span class="mi">1</span>
</code></pre></div></div>

<p>The problem is that “the signature of the constructor cannot widen the type’s parameters”, as explained in <a href="https://discourse.julialang.org/t/constructors-for-parametric-types/119971/4">this post</a> by <strong>@Benny</strong>.</p>

<p>There are several possible solutions:</p>

<ol>
  <li>
    <p>Define the inner constructor as <code class="language-plaintext highlighter-rouge">Particle(mass::C, velocity::C, height::C) where {C &lt;: Complex}</code>, i.e., replace <code class="language-plaintext highlighter-rouge">Particle{C}</code> with <code class="language-plaintext highlighter-rouge">Particle</code>.</p>
  </li>
  <li>
    <p>Move the constructor outside the <code class="language-plaintext highlighter-rouge">struct</code>, making it an <em>outer constructor</em>.
Outer constructors are defined <em>outside</em> the <code class="language-plaintext highlighter-rouge">struct</code> statement, hence the name.
You have less constraints when you define them, but they can no longer rely on <code class="language-plaintext highlighter-rouge">new()</code> and must instead call an inner constructor.
Here is a reworked version of our example:</p>

    <div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="n">g</span> <span class="o">=</span> <span class="mf">9.81</span>

<span class="k">struct</span><span class="nc"> Particle</span><span class="x">{</span><span class="n">E</span> <span class="o">&lt;:</span> <span class="kt">Real</span><span class="x">}</span>
  <span class="n">kinetic_energy</span><span class="o">::</span><span class="n">E</span>
  <span class="n">potential_energy</span><span class="o">::</span><span class="n">E</span>

  <span class="c"># No inner constructor, let's use the one provided by Julia</span>
<span class="k">end</span>

<span class="c"># Note that we do *not* specify `Particle{C}`, as it is no longer</span>
<span class="c"># an inner constructor!</span>
<span class="k">function</span><span class="nf"> Particle</span><span class="x">(</span><span class="n">mass</span><span class="o">::</span><span class="n">C</span><span class="x">,</span> <span class="n">velocity</span><span class="o">::</span><span class="n">C</span><span class="x">,</span> <span class="n">height</span><span class="o">::</span><span class="n">C</span><span class="x">)</span> <span class="k">where</span> <span class="x">{</span><span class="n">C</span> <span class="o">&lt;:</span> <span class="kt">Complex</span><span class="x">}</span>
  <span class="n">kinetic_energy</span> <span class="o">=</span> <span class="mi">1</span><span class="o">/</span><span class="mi">2</span> <span class="o">*</span> <span class="n">abs</span><span class="x">(</span><span class="n">mass</span><span class="x">)</span> <span class="o">*</span> <span class="n">abs</span><span class="x">(</span><span class="n">velocity</span><span class="x">)</span><span class="o">^</span><span class="mi">2</span>
  <span class="n">potential_energy</span> <span class="o">=</span> <span class="n">abs</span><span class="x">(</span><span class="n">mass</span><span class="x">)</span> <span class="o">*</span> <span class="n">g</span> <span class="o">*</span> <span class="n">abs</span><span class="x">(</span><span class="n">height</span><span class="x">)</span>

  <span class="n">E</span> <span class="o">=</span> <span class="n">typeof</span><span class="x">(</span><span class="n">kinetic_energy</span><span class="x">)</span>
  <span class="o">//</span> <span class="n">Call</span> <span class="n">the</span> <span class="x">(</span><span class="n">default</span><span class="x">)</span> <span class="n">inner</span> <span class="n">constructor</span>
  <span class="k">return</span> <span class="n">Particle</span><span class="x">{</span><span class="n">E</span><span class="x">}(</span><span class="n">kinetic_energy</span><span class="x">,</span> <span class="n">potential_energy</span><span class="x">)</span>
<span class="k">end</span>
</code></pre></div>    </div>
  </li>
</ol>

<p>Now that we have presented how parametric constructors work, let’s share a few tips.</p>

<h1 id="smart-use-of-promote">Smart use of <code class="language-plaintext highlighter-rouge">promote</code></h1>

<p>Suppose you need to define a type to represent a 3D vector.
The three components should be floating-point numbers, as you are going to compute the norm of the vector, taking cross products, etc., and all these operations are defined for real numbers.
On the other hand, you want to be able to quickly instantiate vectors using integer components:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">e_x</span> <span class="o">=</span> <span class="n">Vec</span><span class="x">(</span><span class="mi">1</span><span class="x">,</span> <span class="mi">0</span><span class="x">,</span> <span class="mi">0</span><span class="x">)</span>   <span class="c"># Easier to type and read than `Vec(1.0, 0.0, 0.0)`</span>
</code></pre></div></div>

<p>Let’s look at a few possible ways to define a 3D vector that is handy to use and does the “right” thing in typical situations.</p>

<p>We can attempt to define <code class="language-plaintext highlighter-rouge">Vec</code> in the following way:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">"A 3D vector"</span>
<span class="k">struct</span><span class="nc"> Vec</span><span class="x">{</span><span class="n">T</span> <span class="o">&lt;:</span> <span class="kt">AbstractFloat</span><span class="x">}</span>  <span class="c"># Force `T` to be a floating-point type</span>
    <span class="n">x</span><span class="o">::</span><span class="n">T</span>
    <span class="n">y</span><span class="o">::</span><span class="n">T</span>
    <span class="n">z</span><span class="o">::</span><span class="n">T</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Let’s now define the three basis vectors $\hat e_x$, $\hat e_y$, $\hat e_z$.
Unfortunately, we cannot use the notation <code class="language-plaintext highlighter-rouge">Vec(1, 0, 0)</code> for $\hat e_x$, as Julia would complain that we are passing integers instead of floats.
It is the problem we mentioned above!
Rather, we must type</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ex</span> <span class="o">=</span> <span class="n">Vec</span><span class="x">(</span><span class="mf">1.</span><span class="x">,</span> <span class="mf">0.</span><span class="x">,</span> <span class="mf">0.</span><span class="x">)</span>
<span class="n">ey</span> <span class="o">=</span> <span class="n">Vec</span><span class="x">(</span><span class="mf">0.</span><span class="x">,</span> <span class="mf">1.</span><span class="x">,</span> <span class="mf">0.</span><span class="x">)</span>
<span class="n">ez</span> <span class="o">=</span> <span class="n">Vec</span><span class="x">(</span><span class="mf">0.</span><span class="x">,</span> <span class="mf">0.</span><span class="x">,</span> <span class="mf">1.</span><span class="x">)</span>
</code></pre></div></div>

<p>or</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ex</span> <span class="o">=</span> <span class="n">Vec</span><span class="x">{</span><span class="kt">Float64</span><span class="x">}(</span><span class="mi">1</span><span class="x">,</span> <span class="mi">0</span><span class="x">,</span> <span class="mi">0</span><span class="x">)</span>
<span class="n">ey</span> <span class="o">=</span> <span class="n">Vec</span><span class="x">{</span><span class="kt">Float64</span><span class="x">}(</span><span class="mi">0</span><span class="x">,</span> <span class="mi">1</span><span class="x">,</span> <span class="mi">0</span><span class="x">)</span>
<span class="n">ez</span> <span class="o">=</span> <span class="n">Vec</span><span class="x">{</span><span class="kt">Float64</span><span class="x">}(</span><span class="mi">0</span><span class="x">,</span> <span class="mi">0</span><span class="x">,</span> <span class="mi">1</span><span class="x">)</span>
</code></pre></div></div>

<p>Both solutions are quite ugly.
However, we can define an <em>outer</em> constructor that performs the correct conversion:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span><span class="nf"> Vec</span><span class="x">(</span><span class="n">x</span><span class="x">,</span> <span class="n">y</span><span class="x">,</span> <span class="n">z</span><span class="x">)</span>
    <span class="n">xp</span><span class="x">,</span> <span class="n">yp</span><span class="x">,</span> <span class="n">zp</span> <span class="o">=</span> <span class="n">promote</span><span class="x">(</span><span class="n">float</span><span class="x">(</span><span class="n">x</span><span class="x">),</span> <span class="n">float</span><span class="x">(</span><span class="n">y</span><span class="x">),</span> <span class="n">float</span><span class="x">(</span><span class="n">z</span><span class="x">))</span>
    <span class="n">T</span> <span class="o">=</span> <span class="n">typeof</span><span class="x">(</span><span class="n">xp</span><span class="x">)</span>
    <span class="k">return</span> <span class="n">Vec</span><span class="x">{</span><span class="n">T</span><span class="x">}(</span><span class="n">xp</span><span class="x">,</span> <span class="n">yp</span><span class="x">,</span> <span class="n">zp</span><span class="x">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>We use <code class="language-plaintext highlighter-rouge">float()</code> to convert integer types to a suitable floating point type, and <code class="language-plaintext highlighter-rouge">promote</code> returns a tuple where all the value are “pushed” up to the smallest type capable to hold all the values.
This means that even if we pass a <code class="language-plaintext highlighter-rouge">Float64</code> for <code class="language-plaintext highlighter-rouge">x</code>, a <code class="language-plaintext highlighter-rouge">Float32</code> for <code class="language-plaintext highlighter-rouge">y</code>, and a <code class="language-plaintext highlighter-rouge">Int8</code> for z (weird case!), the result will be that <code class="language-plaintext highlighter-rouge">xp</code>, <code class="language-plaintext highlighter-rouge">yp</code>, and <code class="language-plaintext highlighter-rouge">zp</code> will all be <code class="language-plaintext highlighter-rouge">Float64</code>:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">julia</span><span class="o">&gt;</span> <span class="n">Vec</span><span class="x">(</span><span class="mi">1</span><span class="x">,</span> <span class="mi">0</span><span class="x">,</span> <span class="mi">0</span><span class="x">)</span>
<span class="n">Vec</span><span class="x">{</span><span class="kt">Float64</span><span class="x">}(</span><span class="mf">1.0</span><span class="x">,</span> <span class="mf">0.0</span><span class="x">,</span> <span class="mf">0.0</span><span class="x">)</span>

<span class="n">julia</span><span class="o">&gt;</span> <span class="n">Vec</span><span class="x">(</span><span class="mf">1.0f0</span><span class="x">,</span> <span class="mf">0.0f0</span><span class="x">,</span> <span class="mf">0.0f0</span><span class="x">)</span>
<span class="n">Vec</span><span class="x">{</span><span class="kt">Float32</span><span class="x">}(</span><span class="mf">1.0f0</span><span class="x">,</span> <span class="mf">0.0f0</span><span class="x">,</span> <span class="mf">0.0f0</span><span class="x">)</span>

<span class="n">julia</span><span class="o">&gt;</span> <span class="n">Vec</span><span class="x">(</span><span class="mf">1.0f0</span><span class="x">,</span> <span class="kt">Int16</span><span class="x">(</span><span class="mi">2</span><span class="x">),</span> <span class="kt">Int8</span><span class="x">(</span><span class="mi">3</span><span class="x">))</span>
<span class="n">Vec</span><span class="x">{</span><span class="kt">Float64</span><span class="x">}(</span><span class="mf">1.0</span><span class="x">,</span> <span class="mf">2.0</span><span class="x">,</span> <span class="mf">3.0</span><span class="x">)</span>
</code></pre></div></div>

<p>Note that in the latter case Julia uses <code class="language-plaintext highlighter-rouge">Float64</code> despite the fact that we only passed integers and <code class="language-plaintext highlighter-rouge">Float32</code>, so <code class="language-plaintext highlighter-rouge">Float32</code> would have been enough.
The problem is that <code class="language-plaintext highlighter-rouge">float()</code> converts integers to <code class="language-plaintext highlighter-rouge">Float64</code> by default, hence the result.
If you prefer to use the smallest <code class="language-plaintext highlighter-rouge">FloatXX</code> type available, just invert the order between <code class="language-plaintext highlighter-rouge">promote()</code> and <code class="language-plaintext highlighter-rouge">float()</code>:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span><span class="nf"> Vec</span><span class="x">(</span><span class="n">x</span><span class="x">,</span> <span class="n">y</span><span class="x">,</span> <span class="n">z</span><span class="x">)</span>
    <span class="n">xp</span><span class="x">,</span> <span class="n">yp</span><span class="x">,</span> <span class="n">zp</span> <span class="o">=</span> <span class="x">(</span><span class="n">float</span><span class="x">(</span><span class="n">val</span><span class="x">)</span> <span class="k">for</span> <span class="n">val</span> <span class="k">in</span> <span class="n">promote</span><span class="x">(</span><span class="n">x</span><span class="x">,</span> <span class="n">y</span><span class="x">,</span> <span class="n">z</span><span class="x">))</span>
    <span class="n">T</span> <span class="o">=</span> <span class="n">typeof</span><span class="x">(</span><span class="n">xp</span><span class="x">)</span>
    <span class="k">return</span> <span class="n">Vec</span><span class="x">{</span><span class="n">T</span><span class="x">}(</span><span class="n">xp</span><span class="x">,</span> <span class="n">yp</span><span class="x">,</span> <span class="n">zp</span><span class="x">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>With this definition, our last example produces a <code class="language-plaintext highlighter-rouge">Vec{Float32}</code> object:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">julia</span><span class="o">&gt;</span> <span class="n">Vec</span><span class="x">(</span><span class="mf">1.0f0</span><span class="x">,</span> <span class="kt">Int16</span><span class="x">(</span><span class="mi">2</span><span class="x">),</span> <span class="kt">Int8</span><span class="x">(</span><span class="mi">3</span><span class="x">))</span>
<span class="n">Vec</span><span class="x">{</span><span class="kt">Float32</span><span class="x">}(</span><span class="mf">1.0</span><span class="x">,</span> <span class="mf">2.0</span><span class="x">,</span> <span class="mf">3.0</span><span class="x">)</span>
</code></pre></div></div>

<h1 id="making-unitful-compatible-types">Making Unitful-compatible types</h1>

<p>Be aware that there are cases when it is better to mark the fact that different fields in a <code class="language-plaintext highlighter-rouge">struct</code> have different types, even if they take the same amount of memory.
Let’s consider a structure holding the coordinates of a 2D point in polar coordinates.
A naive implementation could be the following:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span><span class="nc"> PolPoint</span><span class="x">{</span><span class="n">T</span> <span class="o">&lt;:</span> <span class="kt">Number</span><span class="x">}</span>
    <span class="n">r</span><span class="o">::</span><span class="n">T</span>
    <span class="n">θ</span><span class="o">::</span><span class="n">T</span>
<span class="k">end</span>
</code></pre></div></div>

<p>The intent of the programmer was surely to let the user use <code class="language-plaintext highlighter-rouge">Float64</code>, <code class="language-plaintext highlighter-rouge">Float32</code>, or even <code class="language-plaintext highlighter-rouge">BigFloat</code> to store the two components of the coordinates.
That’s the reason why they declared <code class="language-plaintext highlighter-rouge">PolPoint</code> as a parametric type.</p>

<p>However, if <code class="language-plaintext highlighter-rouge">PolPoint</code> is used in a code that keeps track of measurement units through the <a href="https://painterqubits.github.io/Unitful.jl/stable/">Unitful.jl</a> package, troubles will arise.
The <code class="language-plaintext highlighter-rouge">r</code> coordinate is a length, while <code class="language-plaintext highlighter-rouge">θ</code> is an angle, and thus they cannot be of the same type <code class="language-plaintext highlighter-rouge">T</code>!</p>

<p>The correct solution is to define <code class="language-plaintext highlighter-rouge">PolPoint</code> in the following way:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span><span class="nc"> PolPoint</span><span class="x">{</span><span class="n">L</span> <span class="o">&lt;:</span> <span class="kt">Number</span><span class="x">,</span> <span class="n">A</span> <span class="o">&lt;:</span> <span class="kt">Number</span><span class="x">}</span>
    <span class="n">r</span><span class="o">::</span><span class="n">L</span>
    <span class="n">θ</span><span class="o">::</span><span class="n">A</span>

    <span class="c"># Inner constructor to perform basic checks and</span>
    <span class="c"># prevent Julia from creating a default one</span>
    <span class="k">function</span><span class="nf"> PolPoint</span><span class="x">{</span><span class="n">L</span><span class="x">,</span> <span class="n">A</span><span class="x">}(</span><span class="n">r</span><span class="x">,</span> <span class="n">θ</span><span class="x">)</span> <span class="k">where</span> <span class="x">{</span><span class="n">L</span><span class="x">,</span> <span class="n">A</span><span class="x">}</span>
        <span class="n">r</span> <span class="o">≥</span> <span class="n">zero</span><span class="x">(</span><span class="n">r</span><span class="x">)</span> <span class="o">||</span> <span class="n">error</span><span class="x">(</span><span class="s">"Invalid value for r = </span><span class="si">$</span><span class="s">r"</span><span class="x">)</span>
        <span class="n">new</span><span class="x">{</span><span class="n">L</span><span class="x">,</span> <span class="n">A</span><span class="x">}(</span><span class="n">r</span><span class="x">,</span> <span class="n">θ</span><span class="x">)</span>
    <span class="k">end</span>
<span class="k">end</span>

<span class="c"># Since we stopped Julia from providing a default inner</span>
<span class="c"># constructor, this outer constructor won’t be shadowed</span>
<span class="c"># by it</span>
<span class="k">function</span><span class="nf"> PolPoint</span><span class="x">(</span><span class="n">r</span><span class="x">,</span> <span class="n">θ</span><span class="x">)</span>
    <span class="n">rp</span> <span class="o">=</span> <span class="n">float</span><span class="x">(</span><span class="n">r</span><span class="x">)</span>
    <span class="n">θp</span> <span class="o">=</span> <span class="n">float</span><span class="x">(</span><span class="n">θ</span><span class="x">)</span>
    <span class="n">L</span> <span class="o">=</span> <span class="n">typeof</span><span class="x">(</span><span class="n">rp</span><span class="x">)</span>
    <span class="n">A</span> <span class="o">=</span> <span class="n">typeof</span><span class="x">(</span><span class="n">θp</span><span class="x">)</span>
    <span class="k">return</span> <span class="n">PolPoint</span><span class="x">{</span><span class="n">L</span><span class="x">,</span> <span class="n">A</span><span class="x">}(</span><span class="n">rp</span><span class="x">,</span> <span class="n">θp</span><span class="x">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>where <code class="language-plaintext highlighter-rouge">L</code> marks the fact that the type encodes a length, while <code class="language-plaintext highlighter-rouge">A</code> encodes an angle.
If the caller does not care about measurement units, they are able to use the type as usual:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">julia</span><span class="o">&gt;</span> <span class="n">PolPoint</span><span class="x">(</span><span class="mi">3</span><span class="x">,</span> <span class="nb">π</span><span class="o">/</span><span class="mi">2</span><span class="x">)</span>
<span class="n">PolPoint</span><span class="x">{</span><span class="kt">Float64</span><span class="x">,</span> <span class="kt">Float64</span><span class="x">}(</span><span class="mf">3.0</span><span class="x">,</span> <span class="mf">1.5707963267948966</span><span class="x">)</span>
</code></pre></div></div>

<p>But the type is able to work well with Unitful.jl as well:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">julia</span><span class="o">&gt;</span> <span class="k">import</span> <span class="n">Unitful</span><span class="o">:</span> <span class="n">°</span><span class="x">,</span> <span class="n">m</span>

<span class="n">julia</span><span class="o">&gt;</span> <span class="n">PolPoint</span><span class="x">(</span><span class="mi">1</span><span class="n">m</span><span class="x">,</span> <span class="mi">90</span><span class="n">°</span><span class="x">)</span>
<span class="n">PolPoint</span><span class="x">{</span>
    <span class="n">Unitful</span><span class="o">.</span><span class="n">Quantity</span><span class="x">{</span><span class="kt">Float64</span><span class="x">,</span> <span class="err">𝐋</span><span class="x">,</span> <span class="n">Unitful</span><span class="o">.</span><span class="n">FreeUnits</span><span class="x">{(</span><span class="n">m</span><span class="x">,),</span> <span class="err">𝐋</span><span class="x">,</span> <span class="nb">nothing</span><span class="x">}},</span>
    <span class="n">Unitful</span><span class="o">.</span><span class="n">Quantity</span><span class="x">{</span><span class="kt">Float64</span><span class="x">,</span> <span class="n">NoDims</span><span class="x">,</span> <span class="n">Unitful</span><span class="o">.</span><span class="n">FreeUnits</span><span class="x">{(</span><span class="n">°</span><span class="x">,),</span> <span class="n">NoDims</span><span class="x">,</span> <span class="nb">nothing</span><span class="x">}}</span>
<span class="x">}(</span><span class="mf">1.0</span> <span class="n">m</span><span class="x">,</span> <span class="mf">90.0</span><span class="n">°</span><span class="x">)</span>
</code></pre></div></div>

<h1 id="use-of-kwdef">Use of <code class="language-plaintext highlighter-rouge">@kwdef</code></h1>

<p>Since Julia 1.9, the macro <a href="https://docs.julialang.org/en/v1/base/base/#Base.@kwdef"><code class="language-plaintext highlighter-rouge">@kwdef</code></a> is publicly available to help designing easy-to-use types.
It implements a constructor that takes the parameters from keyword parameters named after the fields of the <code class="language-plaintext highlighter-rouge">struct</code>:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@kwdef</span> <span class="k">struct</span><span class="nc"> SimulationParameters</span>
    <span class="n">input_file</span><span class="o">::</span><span class="kt">String</span>
    <span class="n">output_file</span><span class="o">::</span><span class="kt">String</span>
    <span class="n">error_threshold</span><span class="o">::</span><span class="kt">Float64</span> <span class="o">=</span> <span class="mf">1e-7</span>
    <span class="n">num_of_iterations</span><span class="o">::</span><span class="kt">Int</span> <span class="o">=</span> <span class="mi">100</span>
<span class="k">end</span>

<span class="n">params</span> <span class="o">=</span> <span class="n">SimulationParameters</span><span class="x">(</span>
    <span class="n">input_file</span> <span class="o">=</span> <span class="s">"foo.txt"</span><span class="x">,</span>
    <span class="n">output_file</span> <span class="o">=</span> <span class="s">"bar.txt"</span><span class="x">,</span>
    <span class="c"># Do not specify `error_threshold` and use the default value</span>
    <span class="n">num_of_iterations</span> <span class="o">=</span> <span class="mi">500</span><span class="x">,</span>    <span class="c"># Use a value different than the default</span>
<span class="x">)</span>
</code></pre></div></div>

<p>The biggest advantage in using <code class="language-plaintext highlighter-rouge">@kwdef</code> is readability.
Compare the call above to the constructor with one which does not use keywords:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span><span class="nc"> SimulationParameters</span>
    <span class="n">input_file</span><span class="o">::</span><span class="kt">String</span>
    <span class="n">output_file</span><span class="o">::</span><span class="kt">String</span>
    <span class="n">error_threshold</span><span class="o">::</span><span class="kt">Float64</span>
    <span class="n">num_of_iterations</span><span class="o">::</span><span class="kt">Int</span>
<span class="k">end</span>

<span class="c"># Without keywords, how can I tell if "foo.txt" is the input or output file?</span>
<span class="c"># And I must pass the value for `error_threshold`, as I could not specify</span>
<span class="c"># default values when I defined the type</span>
<span class="n">params</span> <span class="o">=</span> <span class="n">SimulationParameters</span><span class="x">(</span><span class="s">"foo.txt"</span><span class="x">,</span> <span class="s">"bar.txt"</span><span class="x">,</span> <span class="mf">1e-7</span><span class="x">,</span> <span class="mi">500</span><span class="x">)</span>
</code></pre></div></div>

<p>You can inspect the implementation of <code class="language-plaintext highlighter-rouge">@kwdef</code> in Julia’s <a href="https://github.com/JuliaLang/julia/blob/b79856e7a84b7c945590cafae74efbeaf4d9d8f9/base/util.jl#L545">GitHub repository</a>.</p>

<p>There is one thing you should be aware of when using <code class="language-plaintext highlighter-rouge">@kwdef</code> with parametric types.
Consider this example:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@kwdef</span> <span class="k">struct</span><span class="nc"> GasOfParticles</span><span class="x">{</span><span class="n">T</span> <span class="o">&lt;:</span> <span class="kt">Real</span><span class="x">}</span>
  <span class="n">num_of_particles</span><span class="o">::</span><span class="kt">Int64</span> <span class="o">=</span> <span class="mi">10_000</span>
  <span class="n">temperature</span><span class="o">::</span><span class="n">T</span> <span class="o">=</span> <span class="n">zero</span><span class="x">(</span><span class="n">T</span><span class="x">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>We use <code class="language-plaintext highlighter-rouge">GasOfParticles</code> to simulate an ideal gas in thermal equilibrium, and we want that the temperature be zero when not specified.
This definition implements a constructor that accepts no parameters at all, as all the fields have a default value.
This constructor happily accepts that you avoid passing a specific type <code class="language-plaintext highlighter-rouge">{T}</code>, but then Julia complains because <code class="language-plaintext highlighter-rouge">T</code> is undefined!</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">julia</span><span class="o">&gt;</span> <span class="n">GasOfParticles</span><span class="x">(</span><span class="n">num_of_particles</span> <span class="o">=</span> <span class="mi">100</span><span class="x">)</span>
<span class="n">ERROR</span><span class="o">:</span> <span class="kt">UndefVarError</span><span class="o">:</span> <span class="sb">`T`</span> <span class="n">not</span> <span class="n">defined</span>
<span class="n">Stacktrace</span><span class="o">:</span>
 <span class="x">[</span><span class="mi">1</span><span class="x">]</span> <span class="n">top</span><span class="o">-</span><span class="n">level</span> <span class="n">scope</span>
   <span class="err">@</span> <span class="n">REPL</span><span class="x">[</span><span class="mi">2</span><span class="x">]</span><span class="o">:</span><span class="mi">1</span>
</code></pre></div></div>

<p>Of course, things work if you remember to supply the parametric type within curly braces:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">julia</span><span class="o">&gt;</span> <span class="n">GasOfParticles</span><span class="x">{</span><span class="kt">Float64</span><span class="x">}(</span><span class="n">num_of_particles</span> <span class="o">=</span> <span class="mi">100</span><span class="x">)</span>
<span class="n">GasOfParticles</span><span class="x">{</span><span class="kt">Float64</span><span class="x">}(</span><span class="mi">100</span><span class="x">,</span> <span class="mf">0.0</span><span class="x">)</span>
</code></pre></div></div>

<p>In this simple example, spotting the error’s location is straightforward.
However, in more intricate codebases, the error message <code class="language-plaintext highlighter-rouge">`T` is not defined</code> might be challenging to understand because it does not state that the issue was in the call to <code class="language-plaintext highlighter-rouge">GasOfParticles(…)</code>.</p>

<h1 id="acknowledgements">Acknowledgements</h1>

<p>Thanks a lot to the people on the <a href="https://discourse.julialang.org/">Julia Forum</a> for useful discussions.
See in particular the posts in the two threads <a href="https://discourse.julialang.org/t/how-to-use-kwdef-with-parametric-types-and-inner-constructors/107948">How to use <code class="language-plaintext highlighter-rouge">@kwdef</code> with parametric types and inner constructors</a> and <a href="https://discourse.julialang.org/t/constructors-for-parametric-types/119971">Constructors for parametric types</a>.</p>

<h1 id="edits">Edits</h1>

<p>Patrick Häcker <a href="https://discourse.julialang.org/t/new-blog-post-about-julia-parametric-types-and-constructors/120717/7">suggested</a> to use polar coordinates instead of spherical coordinates in the example in <a href="##making-unitful-compatible-types">Making Unitful-compatible types</a>.</p>]]></content><author><name></name></author><category term="julia" /></entry><entry><title type="html">A tutorial about parametric constructors in Julia (1/2)</title><link href="/julia/2024/09/30/julia-parametric-types.html" rel="alternate" type="text/html" title="A tutorial about parametric constructors in Julia (1/2)" /><published>2024-09-30T00:00:00+02:00</published><updated>2024-09-30T00:00:00+02:00</updated><id>/julia/2024/09/30/julia-parametric-types</id><content type="html" xml:base="/julia/2024/09/30/julia-parametric-types.html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#a-short-introduction-to-parametric-types" id="markdown-toc-a-short-introduction-to-parametric-types">A short introduction to parametric types</a></li>
  <li><a href="#union-of-parametric-types" id="markdown-toc-union-of-parametric-types"><code class="language-plaintext highlighter-rouge">UnionAll</code> of parametric types</a></li>
  <li><a href="#preventing-parametric-types-from-being-too-generic" id="markdown-toc-preventing-parametric-types-from-being-too-generic">Preventing parametric types from being too generic</a></li>
  <li><a href="#is-it-always-worth-to-restrict-the-types" id="markdown-toc-is-it-always-worth-to-restrict-the-types">Is it always worth to restrict the types?</a></li>
  <li><a href="#edits" id="markdown-toc-edits">Edits</a></li>
</ul>

<p>Julia enables the definition of <em>parametric types</em>, similar to class templates in C++.
They let the user define a “template” for a <code class="language-plaintext highlighter-rouge">struct</code> where the types are only defined in general terms, and the user will “fill” the definitions once they create an actual object.
To build a <code class="language-plaintext highlighter-rouge">struct</code>, one can implement <em>constructors</em>, which are special functions whose name is the same as the <code class="language-plaintext highlighter-rouge">struct</code> (again, similar to C++) and whose purpose is to set up the object so that its state is consistent.</p>

<p>Constructors for parametric types can be complex.
Still, it is crucial to understand how they work, as they make the code more robust (you can spot conceptual errors earlier) and more performant (the code runs faster).</p>

<p>I wrote this long blog post to put together some facts that I have discovered about this topic.
I often find myself re-reading the chapters in the Julia Manual about <a href="https://docs.julialang.org/en/v1/manual/types/">types</a> and <a href="https://docs.julialang.org/en/v1/manual/methods/">methods</a>, trying to figure out why the way I defined a constructor is not working or doing what I was expecting.
I will stick to facts as much as possible, providing as many practical examples as needed, but please remember that I am not an expert in this field, and some of my explanations may be incorrect.
Send me an email if you think something is wrong or missing.</p>

<p>Because of the length of the text, I am going to split this post in two:</p>

<ol>
  <li>
    <p>In the first part (this one), I will describe what parametric types are;</p>
  </li>
  <li>
    <p>In the second part, we will see how to define constructors for parametric types.</p>
  </li>
</ol>

<h1 id="a-short-introduction-to-parametric-types">A short introduction to parametric types</h1>

<p>Julia permits the definition of composite types using the keyword <code class="language-plaintext highlighter-rouge">struct</code>, as in the following example:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span><span class="nc"> Point</span>
  <span class="n">x</span>
  <span class="n">y</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This defines a type <code class="language-plaintext highlighter-rouge">Point</code> that contains two fields: <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code>.
Thus, <code class="language-plaintext highlighter-rouge">Point</code> can represent a 2D point on the Cartesian plane.
If one wants to define the same in C++, one could come out with the following definition:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="nc">Point</span> <span class="p">{</span>
    <span class="kt">double</span> <span class="n">x</span><span class="p">;</span>
    <span class="kt">double</span> <span class="n">y</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<p>A notable difference between Julia and C++ is that the latter forced us to declare a type (<code class="language-plaintext highlighter-rouge">double</code>) for <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code>, while Julia was happy without it. The definition of <code class="language-plaintext highlighter-rouge">Point</code> in Julia lets both fields to be of any type, even strings:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">julia</span><span class="o">&gt;</span> <span class="n">Point</span><span class="x">(</span><span class="mi">1</span><span class="x">,</span> <span class="mi">2</span><span class="x">)</span>
<span class="n">Point</span><span class="x">(</span><span class="mi">1</span><span class="x">,</span> <span class="mi">2</span><span class="x">)</span>

<span class="n">julia</span><span class="o">&gt;</span> <span class="n">Point</span><span class="x">(</span><span class="mf">3.2</span><span class="x">,</span> <span class="mf">5.1</span><span class="x">)</span>
<span class="n">Point</span><span class="x">(</span><span class="mf">3.2</span><span class="x">,</span> <span class="mf">5.1</span><span class="x">)</span>

<span class="n">julia</span><span class="o">&gt;</span> <span class="n">Point</span><span class="x">(</span><span class="s">"hello"</span><span class="x">,</span> <span class="s">"world"</span><span class="x">)</span>
<span class="n">Point</span><span class="x">(</span><span class="s">"hello"</span><span class="x">,</span> <span class="s">"world"</span><span class="x">)</span>
</code></pre></div></div>

<p>Letting a <code class="language-plaintext highlighter-rouge">Point</code> components be strings is a bit silly! Inspired by the definition of <code class="language-plaintext highlighter-rouge">Point</code> in C++, we might decide to restrict ourselves to only floating-point numbers:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span><span class="nc"> Point</span>
  <span class="n">x</span><span class="o">::</span><span class="kt">Float64</span>
  <span class="n">y</span><span class="o">::</span><span class="kt">Float64</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Much better!
This structure is now conceptually identical to the one in C++.</p>

<p>However, both the C++ and Julia definitions are too rigid.
For instance, both take 16 bytes (64 bits + 64 bits), but there might be situations where one prefers to use 32-bit floating points to save memory.
(This is typical when your code deals with many points and does not strive for high accuracy.)
We might thus want to let the user specify the width of <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code> when they create a new <code class="language-plaintext highlighter-rouge">Point</code> object.
However, we do not want to give the user too much freedom and decide that both <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code> should be of the same type: both must be integers, floating-point numbers, etc.
(The reason for this is that if we need to use both <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code> in a calculation like $\sqrt{x^2 + y^2}$, the CPU has to perform a conversion of <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code> to a common type, which slows down the computation.)
In C++, we can achieve this by using <em>class templates</em>:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="k">struct</span> <span class="nc">Point</span> <span class="p">{</span>
  <span class="n">Point</span><span class="p">(</span><span class="n">T</span> <span class="n">ax</span><span class="p">,</span> <span class="n">T</span> <span class="n">ay</span><span class="p">)</span> <span class="o">:</span> <span class="n">x</span><span class="p">{</span><span class="n">ax</span><span class="p">},</span> <span class="n">y</span><span class="p">{</span><span class="n">ay</span><span class="p">}</span> <span class="p">{}</span>

  <span class="c1">// `x` and `y` must be of the same type `T`!</span>
  <span class="n">T</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">;</span>
<span class="p">};</span>

<span class="n">Point</span> <span class="n">pt1</span><span class="p">{</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">};</span>    <span class="c1">// 64-bit floating points</span>
<span class="n">Point</span> <span class="n">pt2</span><span class="p">{</span><span class="mf">3.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">4.0</span><span class="n">f</span><span class="p">};</span>  <span class="c1">// 32-bit floating points</span>

<span class="c1">// This does not compile:</span>
<span class="c1">//   Point pt3{5.0, 6.0f};  // Error, we're mixing 64-bit and 32-bit types!</span>
</code></pre></div></div>

<p>This implementation satisfies both requirements: (1) when creating a new <code class="language-plaintext highlighter-rouge">Point</code> object, we can specify the width of the type, and (2) regardless of the choice for <code class="language-plaintext highlighter-rouge">T</code>, <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code> must be of the same type.</p>

<p>Julia implements <em>parametric types</em>, which are similar to templates in C++; our structure becomes the following:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span><span class="nc"> Point</span><span class="x">{</span><span class="n">T</span><span class="x">}</span>
    <span class="n">x</span><span class="o">::</span><span class="n">T</span>
    <span class="n">y</span><span class="o">::</span><span class="n">T</span>
<span class="k">end</span>

<span class="n">pt1</span> <span class="o">=</span> <span class="n">Point</span><span class="x">(</span><span class="mf">1.0</span><span class="x">,</span> <span class="mf">2.0</span><span class="x">)</span>      <span class="c"># 64-bit floating points</span>
<span class="n">pt2</span> <span class="o">=</span> <span class="n">Point</span><span class="x">(</span><span class="mf">3.0f0</span><span class="x">,</span> <span class="mf">4.0f0</span><span class="x">)</span>  <span class="c"># 32-bit floating points</span>

<span class="c"># This does not compile:</span>
<span class="c">#   pt3 = Point(5.0, 6.0f0)</span>
</code></pre></div></div>

<p>This definition of <code class="language-plaintext highlighter-rouge">Point{T}</code> shares the same properties with the C++ implementation of <code class="language-plaintext highlighter-rouge">Point&lt;T&gt;</code>: freedom to use different types and consistency between <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code>.</p>

<h1 id="union-of-parametric-types"><code class="language-plaintext highlighter-rouge">UnionAll</code> of parametric types</h1>

<p>In the previous section, we saw that C++ class templates and Julia parametric types enable the creation of a type <code class="language-plaintext highlighter-rouge">Point{T}</code> that “decides” which type to use for some or all of its fields only at the time of instantiation.</p>

<p>A difference between C++ class templates and Julia parametric types is that Julia creates a type union for any parametric type: once we define <code class="language-plaintext highlighter-rouge">Point{T}</code> (parametric type), we enable the definition of several concrete types like <code class="language-plaintext highlighter-rouge">Point{Float64}</code>, <code class="language-plaintext highlighter-rouge">Point{Int}</code>, <code class="language-plaintext highlighter-rouge">Point{String}</code>, etc., and each of them <del>derive from an ancestor type</del> are subtypes of a <code class="language-plaintext highlighter-rouge">UnionAll</code> type:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">julia</span><span class="o">&gt;</span> <span class="n">Point</span><span class="x">{</span><span class="kt">Int</span><span class="x">}</span> <span class="o">&lt;:</span> <span class="n">Point</span>
<span class="nb">true</span>

<span class="n">julia</span><span class="o">&gt;</span> <span class="n">Point</span><span class="x">{</span><span class="kt">Float64</span><span class="x">}</span> <span class="o">&lt;:</span> <span class="n">Point</span>
<span class="nb">true</span>
</code></pre></div></div>

<p>The advantage of having <code class="language-plaintext highlighter-rouge">Point</code> is that now we can write functions that apply to any type of the form <code class="language-plaintext highlighter-rouge">Point{T}</code>, regardless of the actual <code class="language-plaintext highlighter-rouge">T</code>.
It is enough to specialize a parameter over the ancestor <code class="language-plaintext highlighter-rouge">Point</code> instead of a particular parametric type like <code class="language-plaintext highlighter-rouge">Point{Float64}</code>, like in this example:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span><span class="x">(</span><span class="n">x</span><span class="o">::</span><span class="n">Point</span><span class="x">{</span><span class="kt">Float64</span><span class="x">})</span> <span class="o">=</span> <span class="s">"Got a point with 64-bit coordinates: </span><span class="si">$</span><span class="s">x"</span>
<span class="n">f</span><span class="x">(</span><span class="n">x</span><span class="o">::</span><span class="n">Point</span><span class="x">)</span> <span class="o">=</span> <span class="s">"Got a point: </span><span class="si">$</span><span class="s">x"</span>
<span class="n">f</span><span class="x">(</span><span class="n">x</span><span class="x">)</span> <span class="o">=</span> <span class="s">"Got something else: </span><span class="si">$</span><span class="s">x"</span>

<span class="n">println</span><span class="x">(</span><span class="n">f</span><span class="x">(</span><span class="n">Point</span><span class="x">(</span><span class="mf">1.0</span><span class="x">,</span> <span class="mf">2.0</span><span class="x">)))</span>
<span class="n">println</span><span class="x">(</span><span class="n">f</span><span class="x">(</span><span class="n">Point</span><span class="x">(</span><span class="mi">1</span><span class="x">,</span> <span class="mi">2</span><span class="x">)))</span>
<span class="n">println</span><span class="x">(</span><span class="n">f</span><span class="x">(</span><span class="mi">3</span><span class="x">))</span>

<span class="c"># Output:</span>
<span class="c">#   Got a point with 64-bit coordinates: Point{Float64}(1.0, 2.0)</span>
<span class="c">#   Got a point: Point{Int64}(1, 2)</span>
<span class="c">#   Got something else: 3</span>
</code></pre></div></div>

<p>Type <code class="language-plaintext highlighter-rouge">Point</code> is an alias for <code class="language-plaintext highlighter-rouge">Point{T} where T</code>, i.e., it is an union of all the specializations of <code class="language-plaintext highlighter-rouge">Point</code>:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">julia</span><span class="o">&gt;</span> <span class="n">typeof</span><span class="x">(</span><span class="n">Point</span><span class="x">)</span>
<span class="kt">UnionAll</span>
</code></pre></div></div>

<p>Therefore, the definition</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span><span class="x">(</span><span class="n">x</span><span class="o">::</span><span class="n">Point</span><span class="x">)</span> <span class="o">=</span> <span class="s">"Got a point: </span><span class="si">$</span><span class="s">x"</span>
</code></pre></div></div>

<p>is equivalent to the following:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span><span class="x">(</span><span class="n">x</span><span class="o">::</span><span class="n">Point</span><span class="x">{</span><span class="n">T</span><span class="x">})</span> <span class="k">where</span> <span class="n">T</span> <span class="o">=</span> <span class="s">"Got a point: </span><span class="si">$</span><span class="s">x"</span>
</code></pre></div></div>

<p>but it’s shorter to write and thus clearer.</p>

<p>You can read more about <code class="language-plaintext highlighter-rouge">UnionAll</code> in <a href="https://docs.julialang.org/en/v1/devdocs/types/#UnionAll-types">the Julia documentation</a>.</p>

<h1 id="preventing-parametric-types-from-being-too-generic">Preventing parametric types from being too generic</h1>

<p>When we first defined <code class="language-plaintext highlighter-rouge">Point</code> with no type specification for <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code>, we noticed it was too naive because it allowed the user to store strings into <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code>.</p>

<p>This problem remains in the parametric type <code class="language-plaintext highlighter-rouge">Point{T}</code> (and in the C++ class template <code class="language-plaintext highlighter-rouge">Point&lt;T&gt;</code> too):</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span><span class="nc"> Point</span><span class="x">{</span><span class="n">T</span><span class="x">}</span>
    <span class="n">x</span><span class="o">::</span><span class="n">T</span>
    <span class="n">y</span><span class="o">::</span><span class="n">T</span>
<span class="k">end</span>

<span class="c"># Oh gosh, this doesn't look good at all!</span>
<span class="n">pt_wrong</span> <span class="o">=</span> <span class="n">Point</span><span class="x">(</span><span class="s">"this should"</span><span class="x">,</span> <span class="s">"not be allowed"</span><span class="x">)</span>
</code></pre></div></div>

<p>In C++, one could resort to <a href="https://en.wikipedia.org/wiki/Concepts_(C%2B%2B)">concepts</a> (introduced in C++20) to constrain the type of the template parameter <code class="language-plaintext highlighter-rouge">T</code> to floating-point values:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;concepts&gt;</span><span class="cp">
</span>
<span class="c1">// Note `std::floating_point` instead of `typename` here!</span>
<span class="k">template</span> <span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">floating_point</span> <span class="n">T</span><span class="p">&gt;</span>
<span class="k">struct</span> <span class="nc">Point</span> <span class="p">{</span>
  <span class="n">Point</span><span class="p">(</span><span class="n">T</span> <span class="n">ax</span><span class="p">,</span> <span class="n">T</span> <span class="n">ay</span><span class="p">)</span> <span class="o">:</span> <span class="n">x</span><span class="p">{</span><span class="n">ax</span><span class="p">},</span> <span class="n">y</span><span class="p">{</span><span class="n">ay</span><span class="p">}</span> <span class="p">{}</span>
  <span class="n">T</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">;</span>
<span class="p">};</span>

<span class="n">Point</span> <span class="nf">pt1</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">);</span>     <span class="c1">// Ok, use `double`</span>
<span class="n">Point</span> <span class="nf">pt2</span><span class="p">(</span><span class="mf">3.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">4.0</span><span class="n">f</span><span class="p">);</span>   <span class="c1">// Ok, use `float`</span>

<span class="c1">// The following line does not compile:</span>
<span class="c1">//</span>
<span class="c1">//     Point&lt;std::string&gt; pt{"this is", "not allowed"};</span>
</code></pre></div></div>

<p>In Julia, we can use the <code class="language-plaintext highlighter-rouge">&lt;:</code> operator to constrain the supertype of <code class="language-plaintext highlighter-rouge">T</code>:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span><span class="nc"> Point</span><span class="x">{</span><span class="n">T</span> <span class="o">&lt;:</span> <span class="kt">Real</span><span class="x">}</span>
    <span class="n">x</span><span class="o">::</span><span class="n">T</span>
    <span class="n">y</span><span class="o">::</span><span class="n">T</span>
<span class="k">end</span>

<span class="n">pt1</span> <span class="o">=</span> <span class="n">Point</span><span class="x">(</span><span class="mf">1.0</span><span class="x">,</span> <span class="mf">2.0</span><span class="x">)</span>     <span class="c"># Ok, use `Float64`</span>
<span class="n">pt2</span> <span class="o">=</span> <span class="n">Point</span><span class="x">(</span><span class="mf">3.0f0</span><span class="x">,</span> <span class="mf">4.0f0</span><span class="x">)</span> <span class="c"># Ok, use `Float32`</span>

<span class="c"># The following line would not compile:</span>
<span class="c">#</span>
<span class="c">#     pt3 = Point("this is", "not allowed")</span>
</code></pre></div></div>

<p>We can constrain types as a tool to document the purpose of the fields in the struct.
In this case, we are telling whoever wants to instantiate a <code class="language-plaintext highlighter-rouge">Point</code> that the purpose of the fields <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code> is to store something that is conceptually a “number” and not a string.
Thus, <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code> measure something quantitatively and are presumably supposed to be used in mathematical formulae.
Without them, anybody glancing at the code might think that one could assign a string, a file, or a socket to them! (I’m exaggerating for clarity’s sake 😀.)</p>

<h1 id="is-it-always-worth-to-restrict-the-types">Is it always worth to restrict the types?</h1>

<p>Is restricting the types invariably worth it?
After all, there might be some ingenious uses in a <code class="language-plaintext highlighter-rouge">Point</code> type where we <em>do</em> want to store strings in the <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code> components.
That we cannot think of any of them does not mean that there aren’t at all!</p>

<p>There is no general rule here.
However, there is an essential fact that you should keep in mind when facing this kind of doubt.
Parametric types can be <strong>highly</strong> efficient when the type <code class="language-plaintext highlighter-rouge">T</code> is <em>concrete</em>, i.e., it can be used to store actual values in memory because it has a well defined layout and size. Have a look at this:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span><span class="nc"> Generic</span>
   <span class="n">x</span>
   <span class="n">y</span>
<span class="k">end</span>

<span class="k">struct</span><span class="nc"> Parametric</span><span class="x">{</span><span class="n">T</span><span class="x">}</span>
   <span class="n">x</span><span class="o">::</span><span class="n">T</span>
   <span class="n">y</span><span class="o">::</span><span class="n">T</span>
<span class="k">end</span>

<span class="c"># Tip by Patrick Häcker: use "summarysize" instead of "sizeof"</span>
<span class="k">import</span> <span class="n">Base</span><span class="o">:</span> <span class="n">summarysize</span>

<span class="n">println</span><span class="x">(</span><span class="s">"Generic: "</span><span class="x">,</span> <span class="n">summarysize</span><span class="x">(</span><span class="n">Generic</span><span class="x">(</span><span class="kt">Int8</span><span class="x">(</span><span class="mi">1</span><span class="x">),</span> <span class="kt">Int8</span><span class="x">(</span><span class="mi">2</span><span class="x">))),</span> <span class="s">" bytes"</span><span class="x">)</span>
<span class="n">println</span><span class="x">(</span><span class="s">"Parametric: "</span><span class="x">,</span> <span class="n">summarysize</span><span class="x">(</span><span class="n">Parametric</span><span class="x">(</span><span class="kt">Int8</span><span class="x">(</span><span class="mi">1</span><span class="x">),</span> <span class="kt">Int8</span><span class="x">(</span><span class="mi">2</span><span class="x">))),</span> <span class="s">" bytes"</span><span class="x">)</span>
</code></pre></div></div>

<p>The output is surprising:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Generic: 18 bytes
Parametric: 2 bytes
</code></pre></div></div>

<p>If we do <em>not</em> provide a type for <code class="language-plaintext highlighter-rouge">x</code> or <code class="language-plaintext highlighter-rouge">y</code>, Julia assumes that it is of type <code class="language-plaintext highlighter-rouge">Any</code> and thus it “boxes” it into a container.
The result is that <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code> are pointers pointing to the two boxes for <code class="language-plaintext highlighter-rouge">Generic</code>, while <code class="language-plaintext highlighter-rouge">Parametric{T}</code> keeps them close together. This picture illustrates the difference:</p>

<p><img src="/assets/2024-09-30-julia-constructors1/memory-layouts.svg" alt="" style="display:block; margin-left:auto; margin-right:auto" /></p>

<p>Thus, <code class="language-plaintext highlighter-rouge">Generic</code> takes 18 bytes because it needs two pointers (8 bytes each) and two plain one-byte integers.</p>

<p>The advantage of boxes is that Julia is free to grow or shrink the space allocated for the <em>values</em> (i.e., <code class="language-plaintext highlighter-rouge">1</code> and <code class="language-plaintext highlighter-rouge">2</code> in the picture above), as this example shows:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># We want a mutable type because we're going to</span>
<span class="c"># change `x`</span>
<span class="k">mutable struct</span><span class="nc"> MyType</span>
   <span class="n">x</span>
   <span class="n">y</span>
<span class="k">end</span>

<span class="c"># We initialize the type with two 8-bit integers</span>
<span class="n">pt</span> <span class="o">=</span> <span class="n">MyType</span><span class="x">(</span><span class="kt">Int8</span><span class="x">(</span><span class="mi">1</span><span class="x">),</span> <span class="kt">Int8</span><span class="x">(</span><span class="mi">2</span><span class="x">))</span>

<span class="c"># We now ask to use a 64-bit integer instead of the</span>
<span class="c"># original 8-bit type, and Julia does not complain.</span>
<span class="n">pt</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="kt">Int64</span><span class="x">(</span><span class="mi">1</span><span class="x">)</span>
</code></pre></div></div>

<p>Julia fulfills our request to replace an 8-bit value with a 64-bit integer because <code class="language-plaintext highlighter-rouge">x</code> does <em>not</em> contain the value itself but rather a pointer to the “box” containing the 8-bit value.
When we reassign it to the 64-bit value <code class="language-plaintext highlighter-rouge">Int64(1)</code>, Julia throws away the old box, creates a large enough new one, and reassigns the pointer <code class="language-plaintext highlighter-rouge">x</code> to point to this new box.</p>

<p>One might wonder if boxing affects performance, too.
Let’s check this: we will compute the sum of all the distances of a list of points from the center in the case of two lists, one using <code class="language-plaintext highlighter-rouge">Generic</code> and the other using <code class="language-plaintext highlighter-rouge">Parametric</code>.
Here is the benchmark code:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span><span class="nf"> f</span><span class="x">(</span><span class="n">list</span><span class="x">)</span>
    <span class="n">cumsum</span> <span class="o">=</span> <span class="n">zero</span><span class="x">(</span><span class="n">typeof</span><span class="x">(</span><span class="n">list</span><span class="x">[</span><span class="k">begin</span><span class="x">]</span><span class="o">.</span><span class="n">x</span><span class="x">))</span>
    <span class="k">for</span> <span class="n">l</span> <span class="k">in</span> <span class="n">list</span>
        <span class="n">cumsum</span> <span class="o">+=</span> <span class="n">sqrt</span><span class="x">(</span><span class="n">l</span><span class="o">.</span><span class="n">x</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="n">l</span><span class="o">.</span><span class="n">y</span><span class="o">^</span><span class="mi">2</span><span class="x">)</span>
    <span class="k">end</span>

    <span class="k">return</span> <span class="n">cumsum</span>
<span class="k">end</span>

<span class="n">N</span> <span class="o">=</span> <span class="mi">100_000</span>
<span class="n">generic_list</span> <span class="o">=</span> <span class="x">[</span><span class="n">Generic</span><span class="x">(</span><span class="n">rand</span><span class="x">(</span><span class="kt">Float64</span><span class="x">),</span> <span class="n">rand</span><span class="x">(</span><span class="kt">Float64</span><span class="x">))</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="n">N</span><span class="x">]</span>
<span class="n">parametric_list</span> <span class="o">=</span> <span class="x">[</span><span class="n">Parametric</span><span class="x">(</span><span class="n">rand</span><span class="x">(</span><span class="kt">Float64</span><span class="x">),</span> <span class="n">rand</span><span class="x">(</span><span class="kt">Float64</span><span class="x">))</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="n">N</span><span class="x">]</span>
</code></pre></div></div>

<p>And here are the results:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>julia&gt; @benchmark f(generic_list)
BenchmarkTools.Trial: 438 samples with 1 evaluation.
 Range (min … max):  10.457 ms … 147.525 ms  ┊ GC (min … max): 0.00% … 92.25%
 Time  (median):     11.048 ms               ┊ GC (median):    0.00%
 Time  (mean ± σ):   11.399 ms ±   6.529 ms  ┊ GC (mean ± σ):  3.37% ±  4.62%

       ▂▄▂▂ ▄▅▃▄▃▅  ▃▄▁▃▂ ▂█  ▁▁ ▂
  ▃▄▃▅▅███████████▆▇████████████▇█▆▅▆▆█▅▅▄▄▄▄▄▃▃▃▃▄▃▃▃▃▁▁▁▁▃▁▃ ▅
  10.5 ms         Histogram: frequency by time         12.2 ms &lt;

 Memory estimate: 7.63 MiB, allocs estimate: 500000.

julia&gt; @benchmark f(parametric_list)
BenchmarkTools.Trial: 10000 samples with 1 evaluation.
 Range (min … max):  438.580 μs … 669.432 μs  ┊ GC (min … max): 0.00% … 0.00%
 Time  (median):     439.923 μs               ┊ GC (median):    0.00%
 Time  (mean ± σ):   458.728 μs ±  30.981 μs  ┊ GC (mean ± σ):  0.00% ± 0.00%

  █  ▁▃▅  ▄▃▂▁▂▂▂▂▂▂▃▁▁ ▁▁ ▁▁                                   ▁
  ██▄███████████████████████████▇██▇▇▇▇▇▇▇▆▆▆▅▆▆▅▅▅▅▆▄▄▃▅▆▆▃▆▄▅ █
  439 μs        Histogram: log(frequency) by time        586 μs &lt;

 Memory estimate: 16 bytes, allocs estimate: 1.
</code></pre></div></div>

<p>On my laptop, the version with <code class="language-plaintext highlighter-rouge">Parametric</code> is roughly 20 times faster and allocates far less memory.
The fact that the <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code> components in <code class="language-plaintext highlighter-rouge">generic_list</code> are scattered across the memory does not help the CPU cache optimize subsequent memory fetches in the <code class="language-plaintext highlighter-rouge">for</code> loop, partly explaining the poorer performance.
But what about the many allocations?
A call to <code class="language-plaintext highlighter-rouge">@code_warntype f(generic_list)</code> reveals that the culprit is probably the line where <code class="language-plaintext highlighter-rouge">cumsum</code> is incremented.
Julia cannot know the actual type of <code class="language-plaintext highlighter-rouge">l.x</code> and <code class="language-plaintext highlighter-rouge">l.y</code> in the function call <code class="language-plaintext highlighter-rouge">sqrt(l.x^2 + l.y^2)</code>, so it has to retrieve the value of <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code>, check for their type, and be sure that the result fits into <code class="language-plaintext highlighter-rouge">cumsum</code>, which is of type <code class="language-plaintext highlighter-rouge">Float64</code>.
I am not 100% sure why Julia needs to allocate some memory here.
The compiler probably needs memory for some intermediate result related to the calculation involving <code class="language-plaintext highlighter-rouge">l.x</code> and <code class="language-plaintext highlighter-rouge">l.y</code>.
All this work is unnecessary with a list of <code class="language-plaintext highlighter-rouge">Parametric</code> objects, as the width of <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code> is known when Julia compiles the function.</p>

<p>We have learned that parametric types are valuable when we need our code to be performant.
Note that boxing happens not only when you avoid specifying a type but also when you specify a <del>abstract</del> type with an unspecified memory layout and size.
Thus, the following definition is no better than <code class="language-plaintext highlighter-rouge">Generic</code>, even if we specify that <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code> should be real numbers:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span><span class="nc"> MyType</span>
   <span class="n">x</span><span class="o">::</span><span class="kt">Real</span>  <span class="c"># Specifying ::Real makes the typing more precise, yet</span>
   <span class="n">y</span><span class="o">::</span><span class="kt">Real</span>  <span class="c"># boxing is still needed</span>
<span class="k">end</span>

<span class="n">println</span><span class="x">(</span><span class="s">"MyType: "</span><span class="x">,</span> <span class="n">sizeof</span><span class="x">(</span><span class="n">MyType</span><span class="x">(</span><span class="kt">Int8</span><span class="x">(</span><span class="mi">1</span><span class="x">),</span> <span class="kt">Int8</span><span class="x">(</span><span class="mi">2</span><span class="x">))),</span> <span class="s">" bytes"</span><span class="x">)</span>
<span class="c"># Output:</span>
<span class="c">#   MyType: 16 bytes</span>
</code></pre></div></div>

<p>The reason is easy to understand: several types derive from <code class="language-plaintext highlighter-rouge">Real</code> (<code class="language-plaintext highlighter-rouge">Float32</code>, <code class="language-plaintext highlighter-rouge">Float64</code>, <code class="language-plaintext highlighter-rouge">BigFloat</code>, etc.) and have different sizes. Since Julia does not know the space needed in advance, it is forced to box both <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code>.</p>

<p>As noted by <a href="https://discourse.julialang.org/t/new-blog-post-about-julia-parametric-types-and-constructors/120717/6">Patrick Häcker</a>, specifying constraints on the parametric type does not affect performance because it does not cause boxing. Really, you should do so if this better documents the purpose of a parameter. See this example:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span><span class="nc"> Generic</span>
    <span class="n">x</span>
    <span class="n">y</span>
<span class="k">end</span>

<span class="k">struct</span><span class="nc"> Abstract</span>
    <span class="n">x</span><span class="o">::</span><span class="kt">Real</span>   <span class="c"># `Real` is an abstract type</span>
    <span class="n">y</span><span class="o">::</span><span class="kt">Real</span>
<span class="k">end</span>

<span class="k">struct</span><span class="nc"> ParametricAbstract</span><span class="x">{</span><span class="n">T</span> <span class="o">&lt;:</span> <span class="kt">Real</span><span class="x">}</span>
    <span class="n">x</span><span class="o">::</span><span class="n">T</span>
    <span class="n">y</span><span class="o">::</span><span class="n">T</span>
<span class="k">end</span>

<span class="k">import</span> <span class="n">Base</span><span class="o">:</span> <span class="n">summarysize</span>

<span class="n">println</span><span class="x">(</span><span class="s">"Generic: "</span><span class="x">,</span> <span class="n">summarysize</span><span class="x">(</span><span class="n">Generic</span><span class="x">(</span><span class="mf">1.0f0</span><span class="x">,</span> <span class="mf">2.0f0</span><span class="x">)))</span>
<span class="n">println</span><span class="x">(</span><span class="s">"Abstract: "</span><span class="x">,</span> <span class="n">summarysize</span><span class="x">(</span><span class="n">Abstract</span><span class="x">(</span><span class="mf">1.0f0</span><span class="x">,</span> <span class="mf">2.0f0</span><span class="x">)))</span>
<span class="n">println</span><span class="x">(</span><span class="s">"ParametricAbstract: "</span><span class="x">,</span> <span class="n">summarysize</span><span class="x">(</span><span class="n">ParametricAbstract</span><span class="x">(</span><span class="mf">1.0f0</span><span class="x">,</span> <span class="mf">2.0f0</span><span class="x">)))</span>

<span class="c"># Output:</span>
<span class="c">#    Generic: 24</span>
<span class="c">#    Abstract: 24</span>
<span class="c">#    ParametricAbstract: 8</span>
</code></pre></div></div>

<p>Both <code class="language-plaintext highlighter-rouge">Generic</code> and <code class="language-plaintext highlighter-rouge">Abstract</code> need boxing, but the latter is clearer because it states that both <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code> must be real numbers.
However, <code class="language-plaintext highlighter-rouge">ParametricAbstract{Float32}</code> is the best, because it takes just 8 bytes and still forces the two fields to be real numbers.</p>

<p>Tip: you can quickly check if a type is concrete using <code class="language-plaintext highlighter-rouge">isconcretetype()</code>:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">julia</span><span class="o">&gt;</span> <span class="n">isconcretetype</span><span class="x">(</span><span class="kt">Real</span><span class="x">)</span>
<span class="nb">false</span>

<span class="n">julia</span><span class="o">&gt;</span> <span class="n">isconcretetype</span><span class="x">(</span><span class="kt">Int8</span><span class="x">)</span>
<span class="nb">true</span>
</code></pre></div></div>

<p>This concludes the first part of the post. In a few days I will publish the second part, where I will discuss parametric constructors.</p>

<h1 id="edits">Edits</h1>

<p>I reworked Section “<a href="/julia/2024/09/30/julia-parametric-types.html#union-of-parametric-types">Union of parametric types</a>” after a <a href="https://discourse.julialang.org/t/new-blog-post-about-julia-parametric-types-and-constructors/120717/2?u=maurizio_tomasi">comment by @jules</a> on the <a href="https://discourse.julialang.org/">Julia Forum</a>.
Patrick Häcker suggested using <code class="language-plaintext highlighter-rouge">summarysize</code> instead of <code class="language-plaintext highlighter-rouge">sizeof</code> in <a href="https://discourse.julialang.org/t/new-blog-post-about-julia-parametric-types-and-constructors/120717/5">this post</a>, and he provided an example with <code class="language-plaintext highlighter-rouge">Abstract</code> and <code class="language-plaintext highlighter-rouge">ParametricAbstract</code> in <a href="https://discourse.julialang.org/t/new-blog-post-about-julia-parametric-types-and-constructors/120717/6">this post</a>. I removed any reference to <code class="language-plaintext highlighter-rouge">isabstracttype</code> after <a href="https://discourse.julialang.org/t/new-blog-post-about-julia-parametric-types-and-constructors/120717/11?u=maurizio_tomasi">this comment</a> by Neven Sajko.</p>]]></content><author><name></name></author><category term="julia" /></entry><entry><title type="html">How to write your curriculum — Student’s edition</title><link href="/cv/2024/02/21/curricula.html" rel="alternate" type="text/html" title="How to write your curriculum — Student’s edition" /><published>2024-02-21T00:00:00+01:00</published><updated>2024-02-21T00:00:00+01:00</updated><id>/cv/2024/02/21/curricula</id><content type="html" xml:base="/cv/2024/02/21/curricula.html"><![CDATA[<p>I have been part of several selection committees for postdoctoral positions and other jobs related to academia, and one thing that I have consistently seen with amazement is the low quality of the curriculum vitae (CVs) the candidates submitted.
By “low quality”, I do not mean that they were not fit for the job.
Rather, the applicant seriously underestimated their actual achievements; they even <em>forgot</em> to put something totally relevant for the job!</p>

<p>This prompted me to write this post, where I provide a few tips about how to write a great first CV.
It is particularly tailored for students working in physics, but a few principles can be useful for a broader audience.</p>

<h1 id="a-few-general-rules">A few general rules</h1>

<p>First of all, be sure to check if your CV must comply with some pre-defined template.
A common template used in Europe is the so-called <a href="https://europa.eu/europass/en/create-europass-cv">Europass CV</a>, and many institutions ask applicants to write their CV using this format.
Other institutions don’t mandate a template; in this case you’re free to use whatever layout you want.</p>

<h2 id="read-the-advertisement-carefully">Read the advertisement carefully!</h2>

<p>Once you are sure of the kind of format to use, it’s time to read the advertisement for the job position carefully.
No, better rephrase this: it’s time to read the advertisement for the job position <strong>very, very, very carefully</strong>!
It happens quite often that I read CVs which show only a loose match with the position that was actually requested.
Your CV must be tightly bound to the job advertisement!
While reading the advertisement, it’s better if you take notes of the kind of profile that is requested: write down a list of bullet points stating what they are precisely looking for.
Take for instance this job advertisement (abridged):</p>

<blockquote>
  <p>Applications are invited for a Postdoctoral Fellow position at SOME PLACE. The successful candidate will work with Professor SOME GUY and his collaborators on observational studies of extra-solar planets and/or sub-stellar objects. Candidates with expertise and interests in ground-based high-resolution exoplanet spectroscopy and/or low-resolution spectroscopy of exoplanets and planetary-mass brown dwarfs with the James Webb Space Telescope (JWST) are particularly encouraged to apply.</p>
</blockquote>

<p>The bullet list might be something like the following:</p>

<ul>
  <li>Professor SOME GUY [be sure to have a look at the papers they published]</li>
  <li>Extra-solar planets</li>
  <li>Sub-stellar objects</li>
  <li>Ground-based spectroscopy</li>
  <li>Brown dwarfs with planetary masses</li>
  <li>JWST</li>
</ul>

<p>When you have this list and have understood what each bullet point means, it’s time to start writing the CV.</p>

<h2 id="be-short-and-direct">Be short and direct</h2>

<p>The most important thing to stress is that your CV should be <strong>short</strong> and <strong>easy to read</strong>.
When a position is particularly enticing, the inbox of the selection committee is going to be full of CVs of potential applicants, so please do not ask the committee members to read a very long essay about your interests and achievements.
Avoid long sentences and prefer bullet points when listing what you have done.
Unless you are the President of the US, your CV should not be ten pages long!</p>

<p>For the sake of readability, choose a clear font like Arial or Times New Roman and avoid fonts like <a href="https://en.wikipedia.org/wiki/Comic_Sans">Comic Sans</a> like the plague: your CV is supposed to look professional!</p>

<p>Adding a photo to your CV can help the selection committee recognize you during an in-person interview or recall meeting you at a conference or in a previous course. However, in countries like the US, the UK, and Canada, including a photo is considered bad practice as it may introduce unconscious bias based on appearance. Some may also find it inappropriate, interpreting it as an assumption from your side that one’s own looks can influence the selection of a candidate.</p>

<h1 id="how-to-structure-your-cv">How to structure your CV</h1>

<p>These are the basic information that must be present in any CV:</p>

<ol>
  <li>
    <p><strong>Personal details</strong>.
State your name, address, date of birth, email, nationality, and include a photo.
(See above.)
It is not necessary to share your Twitter/Facebook/any-other-social-network accounts, especially if you use them to share personal stuff like holiday photos or screenshots of football matches. But if they do contain work-related stuff, include them! (This is usually the case for GitHub and LinkedIn.)</p>
  </li>
  <li>
    <p><strong>Professional history</strong>: this is the list of the places where you have worked.
However, if you’re a student writing your first CV, your list of jobs might be empty.
If this is the case, just skip this section.</p>
  </li>
  <li>
    <p><strong>Education</strong>.
List the places where you studied in reverse chronological order (most recent first).
If you are still a student, state this clearly in the very first bullet point of this section.
Skip anything that came before high school: it’s useless to list where you attended primary school or kindergarden!
Include your final marks, especially if they are good, but avoid detailing the marks you’ve got in each exam.</p>
  </li>
  <li>
    <p><strong>Skills</strong>: this is the part where you should put most of your effort! We’ll dig into this later.</p>
  </li>
  <li>
    <p><strong>Awards</strong>: state anything remarkable that earned you a prize. It might be an award travel granted by your high school, some honorable mention for your thesis, etc. Even a <em>cum laude</em> mark for your thesis might be considered an award. If you have nothing to list here, please <strong>don’t</strong> include an empty “Awards” section in your CV. (Yes, I’ve seen this!)</p>
  </li>
  <li>
    <p><strong>Publications</strong>: include your bachelor and master theses (title and date), as well as any paper that includes your name in the list of authors.</p>
  </li>
  <li>
    <p><strong>Conferences</strong>: here you should list any conference you attended.
If there are none, skip this section.</p>
  </li>
  <li>
    <p><strong>References</strong>: here you should include the names of a few persons that might be asked to write a “reference letter” for your. Typical choices are your thesis referee, some of your old professors. People outside academia are rarely included.</p>
  </li>
</ol>

<p>Some people want to include an additional section about their personal interests, e.g., cooking, music, etc.
I have mixed feelings about this.
On one hand, it’s nice to remind the people reading your CV that you are a real person.
On the other hand, this section is seldom read by the members in the selection committee, and even if it is read, it is not going to be discussed or considered when picking the best candidate.
Probably it is best to leave it out and concentrate your effort on other parts of the CV.</p>

<p>Finally, be sure <strong>not</strong> to leave anything out of your CV!
I’ve seen many students that avoided mentioning stuff because they assumed that the members of the selection committee already knew it.
Remember that the selection committee must pick the candidate <strong>only</strong> on the basis of what is included in the CV of the candidates!</p>

<h1 id="taylor-your-cv-for-the-position">Taylor your CV for the position</h1>

<p>Ideally, if you are going to apply for <em>N</em> positions, you should write <em>N</em> CVs.
The reason is that your CV should explain why you are a good match for the job.
The fact that you are expert in welding stuff might not be relevant for a position in theoretical astrophysics, so it’s better to leave it out and concentrate in your master thesis, where you analyzed the symmetries of that weird integral equation in Fourier space.
On the other side, if you are applying for a lab position, stress the fact that you learned how to weld when you worked in an electronics laboratory, but do not brag too much about your expertise with that equation.</p>

<p>Of course, it is not really needed to start writing a new CV from scratch every time you want to apply for a new position!
Just take the old CV and fix it.
But it is important to do this every time.</p>

<h1 id="how-to-list-your-skills">How to list your skills</h1>

<p>The section about one’s “skills” is usually what lets me down the most in the CV of young people.
It seems that most of the people are too humble to realize how much they can list in this section.
There is no need to be modest; you should rather strive to be objective!
Be sure to write your skills while keeping in mind those bullet points summarizing the job advertisement, as your skills must show that you are a good match for that position.</p>

<p>Here are a few tips about what you could include and what not:</p>

<ul>
  <li>
    <p>People studying physics at the university attend several laboratories before graduating.
What you learn in these experiences are important and might provide you expertise that other candidates cannot offer.
Do not think that it is not relevant because all the other students in your class did the same experiment (and maybe some of them are applying for the same position)!
Be sure to specify what kind of instruments you learned to use (oscilloscopes, microwave amplifiers, etc.), but avoid mentioning common tools like screwdrivers and hammers!</p>
  </li>
  <li>
    <p>Is there any optional course you took that might be relevant to list in the CV?
For instance, if you took a course on “Advanced classical optics”, you should definitely list it if you are going to apply for a position at an astronomical observatory!</p>
  </li>
  <li>
    <p>When working on your thesis, you might have learned several skills at once.
If this is the case, be sure to list them in distinct bullet points.
Here are a few tips to help you:</p>

    <ol>
      <li>
        <p>Have you learned some new programming language? Or have you improved your coding skills with respect to what you learned in the CS courses?</p>
      </li>
      <li>
        <p>Have you learned how to use some professional software like <a href="https://www.3ds.com/products/simulia/cst-studio-suite">CST Studio Suite</a> or <a href="https://www.autodesk.it/products/inventor">Autodesk Inventor</a>?</p>
      </li>
      <li>
        <p>More broadly, have you learned some new skill? For instance, did you learned some new topic that wasn’t taught in your education, like Bayesian neural networks or cellular automatas?</p>
      </li>
      <li>
        <p>Did you learn how to use some lab hardware?</p>
      </li>
      <li>
        <p>Have you had to automatize some task that was previously done manually? How did you manage to do so?</p>
      </li>
      <li>
        <p>Have you interacted with other people outside your department? Did you spend some time abroad?</p>
      </li>
      <li>
        <p>Have you mentored other people?
(For instance, teaching some other student how to run an experiment.)
This might be important if in your new position you are expected to teach other people how to do some work.</p>
      </li>
    </ol>
  </li>
  <li>
    <p>The way you list an achievement should be taylored for the position.
(See the previous section.)
For instance, suppose that during your thesis you developed a code using <a href="https://julialang.org/">Julia</a> that simulates the behavior of a bolometer; depending on the kind of position you are going to apply, you might stress different things:</p>

    <ul>
      <li>
        <p>If the position is related to the development of detectors, you might want to stress that you had to understand how a bolometer works;</p>
      </li>
      <li>
        <p>If you’re expected to learn a new programming language, stress that you needed to master Julia to write your simulation code;</p>
      </li>
      <li>
        <p>If you’re going to run massively parallel computations, stress that you used a HPC cluster to run your simulations;</p>
      </li>
      <li>
        <p>If you are going to work with real hardware, explain that you had to interact with the manufacturer of to fix an issue in the thermometers connected with the bolometers you were simulating.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>If you are applying for a job related to computer science, be sure to list all your most relevant software projects!
The best way to do this is to provide a link to a public GitHub/GitLab/whatever repository, together with a description that should be taylored for the job position.
(For instance, if the recruiter is looking for the maintainer of a large code base, be sure to put your largest code base in the top position and stress how much complex the code is.)</p>
  </li>
  <li>
    <p>Social skills are important to highlight. If you worked on your thesis/laboratory courses/whatever with other persons and needed to interact with them often, state this clearly.
Recruiters are happier if the person they are hiring is sociable and able to do team work, and they will surely prefer this kind of figure over a weird genius who does not know how to interact with other human beings.</p>
  </li>
</ul>

<h1 id="check-it-carefully-before-sending-it">Check it carefully before sending it!</h1>

<p>The worst thing in a CV is the presence of typos and grammar errors.
Be sure to check the spelling of each word and ask somebody else to read your CV.
Also, re-read one last time the bullet point summarizing the job advertisement (see above) and then read your CV: do you think they match well?</p>

<p>Good luck!</p>]]></content><author><name></name></author><category term="cv" /><summary type="html"><![CDATA[I have been part of several selection committees for postdoctoral positions and other jobs related to academia, and one thing that I have consistently seen with amazement is the low quality of the curriculum vitae (CVs) the candidates submitted. By “low quality”, I do not mean that they were not fit for the job. Rather, the applicant seriously underestimated their actual achievements; they even forgot to put something totally relevant for the job!]]></summary></entry><entry><title type="html">Retroprogramming with Borland Turbo C++ 3.0</title><link href="/c++/2024/01/14/turbo-c++.html" rel="alternate" type="text/html" title="Retroprogramming with Borland Turbo C++ 3.0" /><published>2024-01-14T00:00:00+01:00</published><updated>2024-01-14T00:00:00+01:00</updated><id>/c++/2024/01/14/turbo-c++</id><content type="html" xml:base="/c++/2024/01/14/turbo-c++.html"><![CDATA[<p>Since a few years I am a teacher assistant in a C++ class for second-year students at the department of physics of the Università degli Studi di Milano.
It is a mandatory class where students learn how to use C++ and Object-Oriented Programming to solve numerical problems like root finding, integration, and differential equation solving.
The teacher does not force people to use specific tools, but most of the students rely on G++ and Visual Studio Code to write their code. (It is mandatory that students use GNU Make to write their code, as the teacher believes that this is more instructive than learning higher-level tools like CMake.)
The usage of Visual Studio Code is a big step forward, as in the pre-COVID era they all used Gedit, as VSCode was not available in the computers in the lab!</p>

<p>However, when I learned C and C++ back in the ’90s, I used the compilers by Borland, which provided a much smoother experience than Visual Studio Code and GNU Make: there was a project manager, you could easily navigate through compilation errors, there was an integrated help system, etc.
At least, this is what I remembered…
It has been ages since I fired my old copy of Turbo C++, and I must confess that sometimes I have thought that it might not have been <em>that</em> good, after all, when judged with the eyes of a 21st-century developer.
In the 90s, several tools that we developers now take for granted did not exist: code formatters like <code class="language-plaintext highlighter-rouge">clang-format</code>, high-level features of the language, auto-completion, multiple cursors, refactoring tools, etc.
Could it be that I was remembering things under a much better light than deserved?</p>

<p>This week-end I decided to play a bit with the idea and used <a href="https://en.wikipedia.org/wiki/Turbo_C%2B%2B">Borland Turbo C++ 3.0 for DOS</a> to write from scratch one of the programs that students must develop during the C++ course I mentioned above.
I was the proud owner of a Borland Turbo C++ box, but unfortunately that box has been lost after several moves. (However, I still have the manuals on my bookshelf!)
Luckly, the site <a href="https://archive.org/details/tcc_20210425">www.archive.org</a> has a copy of Turbo C++ 3.0, and I was able to download and install it under a DOSBox virtual machine in just a couple of minutes. (It is available also through the website <a href="https://winworldpc.com/product/turbo-c/3x">WinWorldPC</a>.)</p>

<h1 id="the-ide">The IDE</h1>

<p>Here is what greeted me once I started <code class="language-plaintext highlighter-rouge">TC.EXE</code>:</p>

<p><img src="/assets/2024-01-14-turbocpp/tc_000.png" alt="" /></p>

<p>The Borland IDE looked gorgeous in ’90s, and I must admit that I still find it attractive today.
Nowadays I am used to JetBrains CLion and Qt Creator, but I often connect to remote HPC clusters using SSH, and having a nice-looking IDE that works on the terminal is surely something I would really enjoy!</p>

<h1 id="implementing-the-program">Implementing the program</h1>

<p>I quickly implemented some code that implements the bisection algorithm to find the zeros of the function</p>

\[f(x) = 3x^2 + 5x + 2,\]

<p>which of course are $x_1 = -1$ and $x_2 = -2/3$. I used “Projects” to make sure that the compiler would have compiled both <code class="language-plaintext highlighter-rouge">MAIN.CPP</code> and <code class="language-plaintext highlighter-rouge">MATH.CPP</code>:</p>

<p><img src="/assets/2024-01-14-turbocpp/tc_001.png" alt="" /></p>

<p>Things were not <em>completely</em> immediate though, as it has been a long time since I used pre-standard C++. (Remember, Borland Turbo C++ 3.0 came out on November, 20th 1991!) Here are some of the notable things that the language did not support:</p>

<ol>
  <li>
    <p>Namespaces (no need to write <code class="language-plaintext highlighter-rouge">using namespace std</code> everywhere, which can admittedly be an advantage!);</p>
  </li>
  <li>
    <p>The header files of the standard library all end with <code class="language-plaintext highlighter-rouge">.h</code>, so it’s <code class="language-plaintext highlighter-rouge">#include &lt;iostream.h&gt;</code>, not <code class="language-plaintext highlighter-rouge">#include &lt;iostream&gt;</code>;</p>
  </li>
  <li>
    <p>There is no <code class="language-plaintext highlighter-rouge">bool</code> type nor <code class="language-plaintext highlighter-rouge">true</code> or <code class="language-plaintext highlighter-rouge">false</code>, you’re just supposed to use integers;</p>
  </li>
  <li>
    <p>Inlining was quite primitive and only worked for the simplest cases. I did not need it in my code, but if I had put even a simple <code class="language-plaintext highlighter-rouge">for</code> loop within a method in the header file declaring a class, this would have prevented the inliner from working.</p>
  </li>
</ol>

<p>Borland C++ 3.0 supported primitive template programming, but this is something I did not need for this example: the function <code class="language-plaintext highlighter-rouge">bisect</code> I implemented just takes a pointer to a function <code class="language-plaintext highlighter-rouge">double f(double)</code> and does not do generic programming.</p>

<h1 id="running-the-program">Running the program</h1>

<p>Once the program is written, it’s just a matter of pressing <code class="language-plaintext highlighter-rouge">Ctrl+F9</code> to compile both <code class="language-plaintext highlighter-rouge">MAIN.CPP</code> and <code class="language-plaintext highlighter-rouge">MATH.CPP</code>, link them and run the executable.
As I mentioned above, my program did not compile immediately because I attempted to use several facilities of C++ that were not available back in 1991.
Fortunately, it’s extremely easy to navigate the list of errors using Turbo C++: they are listed in a window, and pressing <code class="language-plaintext highlighter-rouge">Enter</code> moves to the line containing the error:</p>

<p><img src="/assets/2024-01-14-turbocpp/tc_002b.png" alt="" /></p>

<p>Once I fixed all the errors, the program ran correctly on a couple of cases:</p>

<p><img src="/assets/2024-01-14-turbocpp/tc_002.png" alt="" /></p>

<p>Honestly, I would have hoped to spot some bug, because I really wanted to use the integrated debugger!
Despite the fact that there was nothing to debug, I set a breakpoint and stepped the program a few times; debugging commands are somewhat limited.
For instance, you must manually enter the variables you want to watch one by one, while modern IDEs show you the value of all the variables currently in scope; however, I dare say that what’s available should be more than enough for 90% of the cases.
You can watch the value of variables while you step one instruction after another:</p>

<p><img src="/assets/2024-01-14-turbocpp/tc_003.png" alt="" /></p>

<p>You can inspect the call stack:</p>

<p><img src="/assets/2024-01-14-turbocpp/tc_004.png" alt="" /></p>

<p>You can have a look at all the breakpoints you’ve set:</p>

<p><img src="/assets/2024-01-14-turbocpp/tc_005.png" alt="" /></p>

<h1 id="the-help-system">The help system</h1>

<p>An amazing feature that I do not believe it’s available in Visual Studio Code is the help system. Pressing <code class="language-plaintext highlighter-rouge">Ctrl+F1</code> brings you a contextual help window showing the usage of the keyword under the cursor. This is what I got while I was on <code class="language-plaintext highlighter-rouge">cout</code>:</p>

<p><img src="/assets/2024-01-14-turbocpp/tc_006.png" alt="" /></p>

<p>The manual is browsable without an internet connection, which was of course the standard in 1990 but it is a huge plus even today: pressing <code class="language-plaintext highlighter-rouge">Ctrl+F1</code> brings you <em>instantly</em> on the help page, and hyperlinks let you navigate easily through the extensive manuals.</p>

<h1 id="the-verdict">The verdict</h1>

<p>I must confess that in the past I have often toyed with the idea of teaching a C++ class using Borland Turbo C++ for DOS. However, this is the first time I worked again on a (semi-)realistic project using Turbo C++ with the idea to test if it’s feasible. On the one hand, the IDE is amazingly good: you get syntax highlighting, basic project management, a quick way to browse the list of errors produced by the compiler, seamless integration with a proper help system. On the other hand, there are quite severe limitations:</p>

<ol>
  <li>
    <p>After working with high-resolution monitors, I find the 80×25 resolution too coarse: there is simply not enough space to browse your code confortably. (Turbo C++ supports the “43/50 mode” too, but I find its scale too weird to be really useful and had to go back to 25 lines after a few minutes.)</p>
  </li>
  <li>
    <p>Pre-standard C++ as it was used in the 90s is probably too old to be useful today.</p>
  </li>
  <li>
    <p>The editor is ok, but sometimes I feel it too primitive for my tastes. (In particular, I miss multi-cursors and refactoring tools!).</p>
  </li>
  <li>
    <p>Remember that what runs behind the compiler is the old MS-DOS, with all its quirks and limitations. For instance, you are forced to limit the length of the names of source files to 8 characters.</p>
  </li>
</ol>

<p>None of these limitations is too severe, of course, but their ensemble can be quite limiting.</p>

<p>This toy exercise wetted my appetite for new terminal-based solutions implementing an IDE for C++.
Terminal-mode IDEs have the advantage of not requiring very much disk space nor memory, and there are contexts where these limitations are significative.
(Think of low-founded schools in developing countries.)
Moreover, terminal-based programs can be easily used when developing code on remote servers using SSH, which is something I do regularly.
I believe that it should not require too much effort to put together a number of existing libraries to re-create some IDE similar in spirit to Turbo C++ 3.0, yet with all the bells-and-whistles of modern development environments. Here is a list of interesting projects that might be used for this endeavor:</p>

<ul>
  <li>
    <p><a href="https://github.com/magiblot/tvision/">tvision</a> is a modern port of Turbo Vision (the character-based interface used to implement the IDE for Turbo C++ 3.0) which supports modern terminals and Unicode;</p>
  </li>
  <li>
    <p><a href="https://github.com/magiblot/turbo">turbo</a> is an attempt to integrate the <a href="https://www.scintilla.org/index.html">Scintilla editor component</a> in tvision; Scintilla provides several high-level facilities like multiple cursors, syntax highlighting, and stuff that everybody expects in a modern IDE;</p>
  </li>
  <li>
    <p>The same author of tvision and turbo created <a href="https://github.com/magiblot/tvterm">tvterm</a> to test how to integrate <a href="https://www.leonerd.org.uk/code/libvterm/">libvterm</a> with tvision, and results are quite impressive. An integrated terminal is a very common tool provided by modern IDEs;</p>
  </li>
  <li>
    <p><a href="https://clang.llvm.org/doxygen/group__CINDEX.html">libclang</a> provides a C api to parse C/C++ code into an AST, which could be useful to implement refactoring tools;</p>
  </li>
  <li>
    <p>A basic debugging experience could be provided by wrapping <a href="https://www.sourceware.org/gdb/">GDB</a> or <a href="https://lldb.llvm.org/">LLDB</a>.</p>
  </li>
</ul>]]></content><author><name></name></author><category term="c++" /><summary type="html"><![CDATA[Since a few years I am a teacher assistant in a C++ class for second-year students at the department of physics of the Università degli Studi di Milano. It is a mandatory class where students learn how to use C++ and Object-Oriented Programming to solve numerical problems like root finding, integration, and differential equation solving. The teacher does not force people to use specific tools, but most of the students rely on G++ and Visual Studio Code to write their code. (It is mandatory that students use GNU Make to write their code, as the teacher believes that this is more instructive than learning higher-level tools like CMake.) The usage of Visual Studio Code is a big step forward, as in the pre-COVID era they all used Gedit, as VSCode was not available in the computers in the lab!]]></summary></entry><entry><title type="html">Morley’s triangles</title><link href="/geometry/typescript/2023/12/31/morley-triangles.html" rel="alternate" type="text/html" title="Morley’s triangles" /><published>2023-12-31T00:00:00+01:00</published><updated>2023-12-31T00:00:00+01:00</updated><id>/geometry/typescript/2023/12/31/morley-triangles</id><content type="html" xml:base="/geometry/typescript/2023/12/31/morley-triangles.html"><![CDATA[<p>A few days ago I recalled an old article I read many years ago about “Morley’s triangles”. It is a geometrical property of triangles found by <a href="https://en.wikipedia.org/wiki/Frank_Morley">Frank Morley</a> (1860–1937): if you trisect each of the three inner angles and intersect the lines, you will get an inner triangle that is <em>always equilateral</em>. You can find more information and proofs in the <a href="https://en.wikipedia.org/wiki/Morley's_trisector_theorem">Wikipedia page</a> and on <a href="https://mathworld.wolfram.com/MorleysTheorem.html">MathWorld</a>. I remember that the article I read many years ago tried to explain why such a simple result was not discovered by Greek mathematicians, since a large part of Euclid’s <em>Elements</em> covers their properties. The most likely reason is that ancient Greeks didn’t like the idea of “trisecting” an angle, as it cannot be done with a ruler and a compass.</p>

<p>I would have loved to explain them to my children (the youngest has started studying Euclidean geometry in this school year!), but I looked for an interactive way to visualize them and found nothing close to what I wanted. I wanted just to show the <em>first</em> triangle (there are 18 of them!), and I wanted that the user could drag the vertexes of the triangle to explore how the inner triangle stays equilateral despite the deformations of the outer triangle.</p>

<p>I decided it would have been fun to implement this program in <a href="https://www.typescriptlang.org/">TypeScript</a>: it’s been years I’m wanting to study it but have never found the occasion… before today. I bought the book “Mastering TypeScript” by Nathan Rozentals (<a href="https://www.packtpub.com/product/mastering-typescript/9781800564732">Packt publishing</a>): in these days, it’s just $10 instead of $32.99. I picked this book because of the very good reviews on <a href="https://www.amazon.com/Mastering-TypeScript-enterprise-ready-applications-frameworks/dp/1800564732">Amazon</a>, and I can tell you that they are well deserved. The book is wonderful: clear explanations, good examples, full of practical tips about the best workflow to write, run, and test your programs. I found it so clear that I was able to quickly implement a widget to interactively explore Morley’s theorem.</p>

<p>Here is the result, you can drag any of the vertexes of the outer triangle and see how the inner triangle keeps being equilateral:</p>

<canvas id="morley_canvas" width="560" height="560" style="border: 1px solid black;">
</canvas>
<script src="/js/morley.js"></script>

<p>If you’re curious, the TypeScript source code is available on <a href="https://github.com/ziotom78/ziotom78.github.io/blob/master/scripts/morley.ts">GitHub</a>.</p>]]></content><author><name></name></author><category term="geometry" /><category term="typescript" /><summary type="html"><![CDATA[A few days ago I recalled an old article I read many years ago about “Morley’s triangles”. It is a geometrical property of triangles found by Frank Morley (1860–1937): if you trisect each of the three inner angles and intersect the lines, you will get an inner triangle that is always equilateral. You can find more information and proofs in the Wikipedia page and on MathWorld. I remember that the article I read many years ago tried to explain why such a simple result was not discovered by Greek mathematicians, since a large part of Euclid’s Elements covers their properties. The most likely reason is that ancient Greeks didn’t like the idea of “trisecting” an angle, as it cannot be done with a ruler and a compass.]]></summary></entry><entry><title type="html">xdotool!</title><link href="/xdotool/2023/12/23/xdotool.html" rel="alternate" type="text/html" title="xdotool!" /><published>2023-12-23T00:00:00+01:00</published><updated>2023-12-23T00:00:00+01:00</updated><id>/xdotool/2023/12/23/xdotool</id><content type="html" xml:base="/xdotool/2023/12/23/xdotool.html"><![CDATA[<p>In my first post on this new platform, I want to tell you how I use
<code class="language-plaintext highlighter-rouge">xdotool</code>, a command-line program to simulate mouse actions and
keypresses.</p>

<h1 id="what-does-xdotool-do">What does <code class="language-plaintext highlighter-rouge">xdotool</code> do?</h1>

<p>The description on the <a href="https://github.com/jordansissel/xdotool">main
repository</a> states</p>

<blockquote>
  <p>xdotool lets you simulate keyboard input and mouse activity, move and resize windows, etc. It does this using X11’s XTEST extension and other Xlib functions.</p>
</blockquote>

<p>(<strong>Caution</strong>: at the moment, it does not seem that <code class="language-plaintext highlighter-rouge">xdotool</code> supports
Wayland. Since I’m still using X11, this is not an issue for me. If
you use Wayland, I’ve heard that available alternatives are
<a href="https://git.sr.ht/~geb/dotool">dotool</a> or
<a href="https://github.com/ReimuNotMoe/ydotool">ydotool</a>.)</p>

<p>For instance, if you type</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>xdotool click 1
</code></pre></div></div>

<p>the program will simulate the click of the left mouse button on the same spot where the actual mouse cursor is. Similarly,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>xdotool type "Hello, world"
</code></pre></div></div>

<p>will immediately type the characters <code class="language-plaintext highlighter-rouge">Hello, world</code> so fast that you’ll probably see them <em>twice</em>: once before the prompt of your shell appears, and another when the shell catches up and shows the prompt:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[tomasi@maurizio-tombook ~] xdotool type "Hello, world"
Hello, world
[tomasi@maurizio-tombook ~] Hello, world
</code></pre></div></div>

<p>Another possibility is to simulate key events like <code class="language-plaintext highlighter-rouge">Ctrl-X</code>, <code class="language-plaintext highlighter-rouge">Alt-F4</code>, etc.
The program can also interact with windows and do more complicated stuff, but in this post I’ll just show you what I usually do with these three basic tasks: mouse movements, keyboard typing, keypresses.</p>

<h1 id="typing-passwords">Typing passwords</h1>

<p>Somebody might think that <code class="language-plaintext highlighter-rouge">xdotool</code> has little practical use.
When used alone, it is admittedly nothing special, but it unleashes its power when used in scripts or combined with the <code class="language-plaintext highlighter-rouge">sleep</code> command.</p>

<p>A common pattern I use is to make the prompt wait for a few seconds to give me time to switch to another application using <code class="language-plaintext highlighter-rouge">Alt+Tab</code> and then fire <code class="language-plaintext highlighter-rouge">xdotool</code> to do some work.</p>

<p>For instance, I regularly use <a href="https://keepassxc.org/">KeePassXC</a> to manage my passwords.
It’s a password manager that lets you associate a password with different sites and even generate random passwords with high entropy.
When I need to log to a website, I follow this routine:</p>

<ol>
  <li>Open KeePassXC and select the website from my personal database;</li>
  <li>Press <code class="language-plaintext highlighter-rouge">Ctrl+B</code> to copy the username in the clipboard;</li>
  <li>Paste the username in the website;</li>
  <li>Press <code class="language-plaintext highlighter-rouge">Ctrl+C</code> to copy the password in the clipboard;</li>
  <li>Paste it again in the website.</li>
</ol>

<p>This procedure works 99% of the time, and provides me with a feeling of security: I am not using the same password in more than one website, as everybody knows this is <strong>dangerous</strong>. (If you do not know why, see <a href="https://xkcd.com/792/">this XKCD comic</a>).</p>

<p>However, there are a few website I have to use that require you to <em>type</em> your password, as they disable the clipboard while the focus is on the password field.
I cannot really understand what is the purpose of this: purportedly, they say that in this way you are forced to actually remember your password. However, since the same websites require you to use complicated passwords with non-letter characters and digits, my feeling is that most of the users will just scratch it on a post-it and leave it on their monitor.
But I digress.</p>

<p>For these situations, I implemented <a href="https://gist.github.com/ziotom78/2056c4c2c325910fad908d5218058fd6"><code class="language-plaintext highlighter-rouge">typecb</code></a>, a short Bash script that takes the contents of the clipboard and type it using <code class="language-plaintext highlighter-rouge">xdotool</code>:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/sh</span>

<span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">""</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">cat</span> <span class="o">&lt;&lt;</span><span class="no">EOF</span><span class="sh">
Paste the contents of the keyboard as if they were typed using the keyboard

Usage: </span><span class="si">$(</span><span class="nb">basename</span> <span class="nv">$0</span><span class="si">)</span><span class="sh"> WAIT_TIME

where WAIT_TIME is the delay, like "3s" (three seconds)
</span><span class="no">EOF
</span>    <span class="nb">exit </span>1
<span class="k">fi

</span><span class="nb">readonly </span><span class="nv">wait_time</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>

<span class="nb">sleep</span> <span class="nv">$wait_time</span> <span class="o">&amp;&amp;</span> xdotool <span class="nb">type</span> <span class="s2">"</span><span class="si">$(</span>xclip <span class="nt">-o</span><span class="si">)</span><span class="s2">"</span>
</code></pre></div></div>

<p>The procedure I follow to log in in these website is just slightly modified:</p>

<ol>
  <li>Open KeePassXC and select the website from my personal database <em>as usual</em>;</li>
  <li>Press <code class="language-plaintext highlighter-rouge">Ctrl+B</code> to copy the username in the clipboard <em>as usual</em>;</li>
  <li>Paste the username in the website <em>as usual</em>;</li>
  <li>Press <code class="language-plaintext highlighter-rouge">Ctrl+C</code> to copy the password in the clipboard <em>as usual</em>;</li>
  <li>Go back to the web browser;</li>
  <li>Press <code class="language-plaintext highlighter-rouge">Alt+F2</code>, which on my desktop (KDE) asks for a command to be executed;</li>
  <li>Type <code class="language-plaintext highlighter-rouge">typecb 1s</code> and see <code class="language-plaintext highlighter-rouge">xdotool</code> paste the password in the webbrowser</li>
</ol>

<p>I could automate the stuff a bit more, e.g. by including step 4 and 5 in <code class="language-plaintext highlighter-rouge">typecb</code> using <code class="language-plaintext highlighter-rouge">xdotool key Ctrl+C</code> and <code class="language-plaintext highlighter-rouge">xdotool key Alt+Tab</code>, but I use <code class="language-plaintext highlighter-rouge">typecb</code> in a few other situations where this would not be useful.</p>

<h1 id="filling-forms">Filling forms</h1>

<p>Another situation where I find <code class="language-plaintext highlighter-rouge">xdotool</code> invaluable is in the filling of a few webforms required by my University.</p>

<p>I have to track any student-related activity I do during my work hours, like classes and student reception.
This means that every time I have a chat with a student, I am required to note down this time on a webform in a private personal page.
Since I do a lot of student reception, this is a quite boring task to do, and it is exacerbated by the fact that the webpage requires a number of mouse clicks to focus the many input fields. (We’re talking about <em>modern</em> web design, so of course <code class="language-plaintext highlighter-rouge">Tab</code> doesn’t work reliably 100% of the time, sigh!)</p>

<p>Here <code class="language-plaintext highlighter-rouge">xdotool</code> comes to the rescue.
I painstakingly recorded the mouse movement I needed to select each of the entries and implemented a Bash script to simulate their sequence.
It took me roughly half an hour to come with something that actually worked; the biggest part was picking the right screen coordinates (here <code class="language-plaintext highlighter-rouge">xdotool</code> helps again with its command <code class="language-plaintext highlighter-rouge">xdotool getmouselocation</code>) and calibrating the delays so that I give enough time to the webform to update its fields.
To be sure that the coordinates do not change, I enlarged the Firefox window to full screen; otherwise, the script would work only if Firefox has its window always in the same place on the desktop.</p>

<p>The script is quite long, here is just a snippet to give you a taste of how it is implemented:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="nb">readonly </span><span class="nv">MOUSE_DELAY</span><span class="o">=</span>0.25s
<span class="nb">readonly </span><span class="nv">TYPE_DELAY_MS</span><span class="o">=</span>50

<span class="c"># Here comes the part where I parse command line arguments</span>
...

<span class="c"># Scroll to the beginning of the page</span>
xdotool key Home
<span class="nb">sleep</span> <span class="nv">$MOUSE_DELAY</span>

<span class="c"># Click on «Nuova attività»</span>
xdotool mousemove 150 492
<span class="nb">sleep</span> <span class="nv">$MOUSE_DELAY</span>
xdotool click 1
<span class="nb">sleep</span> <span class="nv">$MOUSE_DELAY</span>

<span class="c"># Click on «Forma didattica»</span>
xdotool mousemove_relative <span class="nt">--</span> 45 <span class="nt">-172</span>
<span class="nb">sleep</span> <span class="nv">$MOUSE_DELAY</span>
xdotool click 1
<span class="nb">sleep</span> <span class="nv">$MOUSE_DELAY</span>

<span class="c"># Pick the item from the combo box</span>
<span class="c"># 3 ↓ keys: "Compiti di orientamento/ricevimento per studenti"</span>
xdotool key Down Down Down Enter
<span class="nb">sleep</span> <span class="nv">$MOUSE_DELAY</span>

<span class="c"># Open the date control</span>
xdotool mousemove_relative <span class="nt">--</span> <span class="nt">-70</span> 140
<span class="nb">sleep</span> <span class="nv">$MOUSE_DELAY</span>
xdotool click 1
<span class="nb">sleep</span> <span class="nv">$MOUSE_DELAY</span>

<span class="c"># Etc.</span>
...
</code></pre></div></div>

<p>Note the command <code class="language-plaintext highlighter-rouge">xdotool mousemove_relative</code>: this tells how much the mouse should move <em>with respect to its current position</em>.
The first version of my script just used <code class="language-plaintext highlighter-rouge">xdotool mousemove</code> everywhere, which means that the coordinate are absolute: it’s much easier to create the script in this way, as you just put the same numbers printed by <code class="language-plaintext highlighter-rouge">xdotool getmouselocation</code>.
However, sometimes I change the KDE theme I use, and this affects the height of the title bars, the location of the task bar, etc.
I found that these changes likely affect the placement of the widgets in the webpage.
Using <code class="language-plaintext highlighter-rouge">xdotool mousemove</code> just once at the top of the script and then always rely on <code class="language-plaintext highlighter-rouge">xdotool mousemove_relative</code> ensures that every time I change the KDE theme, I must just fix the first call to <code class="language-plaintext highlighter-rouge">xdotool mousemove</code> and everything else continues to work. (Of course, this trick does not save me from changes to the layout of the webpage, but luckly the layout has been the same for years…)</p>

<p>The script requires the parameters detailing my activity (the date, the number of hours, and the name of the student) to be passed on the command line:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./unimi-insert-student-reception 23/12/2023 2 "Mario Rossi"
</code></pre></div></div>

<p>Every time I have office hours, I keep track of the students in a CSV file on my desktop with this layout:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>16/01/2023, 2, Mario Rossi
19/01/2023, 1, Luca Bianchi
...
</code></pre></div></div>

<p>Once in a while, I log in my University, open the page about activities, and I fire a short script that uses <code class="language-plaintext highlighter-rouge">gawk</code> to extract information from the CSV file and repeatedly call the <code class="language-plaintext highlighter-rouge">xdotool</code> script:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cat student-reception.csv | \
    gawk -F "," '/./ { printf("unimi-insert-student-reception.sh \"%s\" %d \"%s\"\n", $1, $2, $3); }' &gt; script.sh
</code></pre></div></div>

<p>This creates a file <code class="language-plaintext highlighter-rouge">script.sh</code> with this format:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>unimi-insert-student-reception.sh <span class="s2">"16/01/2023"</span> 2 <span class="s2">" Mario Rossi"</span>
unimi-insert-student-reception.sh <span class="s2">"19/01/2023"</span> 1 <span class="s2">" Luca Bianchi"</span>
</code></pre></div></div>

<p>(Yeah, I know I could make <code class="language-plaintext highlighter-rouge">gawk</code> directly call <code class="language-plaintext highlighter-rouge">unimi-insert-student-reception.sh</code>, but I like checking the sequence of commands before actually <em>firing</em> them.)</p>

<p>I then run <code class="language-plaintext highlighter-rouge">script.sh</code> using the command</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sleep 3s &amp;&amp; bash script.sh
</code></pre></div></div>

<p>where of course <code class="language-plaintext highlighter-rouge">sleep 3s</code> gives me enough time to switch to Firefox using <code class="language-plaintext highlighter-rouge">Alt+Tab</code>.</p>

<h1 id="recording-demos">Recording demos</h1>

<p>I often record videos for my classes. They are used to teach how to use Git, how to write programs using IDEs, etc.</p>

<p>I like that these videos are always kept up-to-date: if the video shows a Julia session, I would like that the banner shown when Julia starts presents a reasonably recent version number.
Moreover, it can be that a recent version of the tool/website I am using in the video slightly changes its interface.</p>

<p>I have recently started writing <code class="language-plaintext highlighter-rouge">xdotool</code> scripts that run the commands needed to perform the actions recorded in the video: in this way I can easily update the video.</p>

<p>Surely it takes more time to prepare a video, but the result is far nicer: there are no more wrong keypresses, delays due to me forgetting what to do next, etc.
And I do no need to perform video editing!</p>]]></content><author><name></name></author><category term="xdotool" /><summary type="html"><![CDATA[In my first post on this new platform, I want to tell you how I use xdotool, a command-line program to simulate mouse actions and keypresses.]]></summary></entry></feed>